/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Modules/Translation/Resources/assets/admin/js/TranslationEditor.js":
/*!****************************************************************************!*\
  !*** ./Modules/Translation/Resources/assets/admin/js/TranslationEditor.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _default; });\n/* harmony import */ var _node_modules_x_editable_dist_bootstrap3_editable_js_bootstrap_editable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/x-editable/dist/bootstrap3-editable/js/bootstrap-editable */ \"./Modules/Translation/node_modules/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js\");\n/* harmony import */ var _node_modules_x_editable_dist_bootstrap3_editable_js_bootstrap_editable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_x_editable_dist_bootstrap3_editable_js_bootstrap_editable__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    _classCallCheck(this, _default);\n\n    $('.translation').editable({\n      url: this.update,\n      type: 'text',\n      mode: 'inline',\n      send: 'always'\n    });\n  }\n\n  _createClass(_default, [{\n    key: \"update\",\n    value: function update(data) {\n      $.ajax({\n        url: route('admin.translations.update', this.dataset.key),\n        type: 'PUT',\n        data: {\n          locale: this.dataset.locale,\n          value: data.value\n        },\n        success: function (_success) {\n          function success(_x) {\n            return _success.apply(this, arguments);\n          }\n\n          success.toString = function () {\n            return _success.toString();\n          };\n\n          return success;\n        }(function (message) {\n          success(message);\n        }),\n        error: function (_error) {\n          function error(_x2) {\n            return _error.apply(this, arguments);\n          }\n\n          error.toString = function () {\n            return _error.toString();\n          };\n\n          return error;\n        }(function (xhr) {\n          error(xhr.responseJSON.message);\n        })\n      });\n    }\n  }]);\n\n  return _default;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Nb2R1bGVzL1RyYW5zbGF0aW9uL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vanMvVHJhbnNsYXRpb25FZGl0b3IuanM/MzgxZiJdLCJuYW1lcyI6WyIkIiwiZWRpdGFibGUiLCJ1cmwiLCJ1cGRhdGUiLCJ0eXBlIiwibW9kZSIsInNlbmQiLCJkYXRhIiwiYWpheCIsInJvdXRlIiwiZGF0YXNldCIsImtleSIsImxvY2FsZSIsInZhbHVlIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJlcnJvciIsInhociIsInJlc3BvbnNlSlNPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7QUFHSSxzQkFBYztBQUFBOztBQUNWQSxLQUFDLENBQUMsY0FBRCxDQUFELENBQWtCQyxRQUFsQixDQUEyQjtBQUN2QkMsU0FBRyxFQUFFLEtBQUtDLE1BRGE7QUFFdkJDLFVBQUksRUFBRSxNQUZpQjtBQUd2QkMsVUFBSSxFQUFFLFFBSGlCO0FBSXZCQyxVQUFJLEVBQUU7QUFKaUIsS0FBM0I7QUFNSDs7OztXQUVELGdCQUFPQyxJQUFQLEVBQWE7QUFDVFAsT0FBQyxDQUFDUSxJQUFGLENBQU87QUFDSE4sV0FBRyxFQUFFTyxLQUFLLENBQUMsMkJBQUQsRUFBOEIsS0FBS0MsT0FBTCxDQUFhQyxHQUEzQyxDQURQO0FBRUhQLFlBQUksRUFBRSxLQUZIO0FBR0hHLFlBQUksRUFBRTtBQUNGSyxnQkFBTSxFQUFFLEtBQUtGLE9BQUwsQ0FBYUUsTUFEbkI7QUFFRkMsZUFBSyxFQUFFTixJQUFJLENBQUNNO0FBRlYsU0FISDtBQU9IQyxlQVBHO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLG9CQU9LQyxPQVBMLEVBT2M7QUFDYkQsaUJBQU8sQ0FBQ0MsT0FBRCxDQUFQO0FBQ0gsU0FURTtBQVVIQyxhQVZHO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLG9CQVVHQyxHQVZILEVBVVE7QUFDUEQsZUFBSyxDQUFDQyxHQUFHLENBQUNDLFlBQUosQ0FBaUJILE9BQWxCLENBQUw7QUFDSCxTQVpFO0FBQUEsT0FBUDtBQWNIIiwiZmlsZSI6Ii4vTW9kdWxlcy9UcmFuc2xhdGlvbi9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL2pzL1RyYW5zbGF0aW9uRWRpdG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMveC1lZGl0YWJsZS9kaXN0L2Jvb3RzdHJhcDMtZWRpdGFibGUvanMvYm9vdHN0cmFwLWVkaXRhYmxlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICQoJy50cmFuc2xhdGlvbicpLmVkaXRhYmxlKHtcclxuICAgICAgICAgICAgdXJsOiB0aGlzLnVwZGF0ZSxcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICBtb2RlOiAnaW5saW5lJyxcclxuICAgICAgICAgICAgc2VuZDogJ2Fsd2F5cycsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRhdGEpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvdXRlKCdhZG1pbi50cmFuc2xhdGlvbnMudXBkYXRlJywgdGhpcy5kYXRhc2V0LmtleSksXHJcbiAgICAgICAgICAgIHR5cGU6ICdQVVQnLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBsb2NhbGU6IHRoaXMuZGF0YXNldC5sb2NhbGUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YS52YWx1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3VjY2VzcyhtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcnJvcih4aHIpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yKHhoci5yZXNwb25zZUpTT04ubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Modules/Translation/Resources/assets/admin/js/TranslationEditor.js\n");

/***/ }),

/***/ "./Modules/Translation/Resources/assets/admin/js/main.js":
/*!***************************************************************!*\
  !*** ./Modules/Translation/Resources/assets/admin/js/main.js ***!
  \***************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _TranslationEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TranslationEditor */ \"./Modules/Translation/Resources/assets/admin/js/TranslationEditor.js\");\n\n$('.translations-table').dataTable({\n  pageLength: 20,\n  lengthMenu: [10, 20, 50, 100, 200],\n  drawCallback: function drawCallback() {\n    new _TranslationEditor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Nb2R1bGVzL1RyYW5zbGF0aW9uL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vanMvbWFpbi5qcz82ZDA1Il0sIm5hbWVzIjpbIiQiLCJkYXRhVGFibGUiLCJwYWdlTGVuZ3RoIiwibGVuZ3RoTWVudSIsImRyYXdDYWxsYmFjayIsIlRyYW5zbGF0aW9uRWRpdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFQUEsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUJDLFNBQXpCLENBQW1DO0FBQy9CQyxZQUFVLEVBQUUsRUFEbUI7QUFFL0JDLFlBQVUsRUFBRSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEdBQWIsRUFBa0IsR0FBbEIsQ0FGbUI7QUFHL0JDLGNBQVksRUFBRSx3QkFBTTtBQUNoQixRQUFJQywwREFBSjtBQUNIO0FBTDhCLENBQW5DIiwiZmlsZSI6Ii4vTW9kdWxlcy9UcmFuc2xhdGlvbi9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL2pzL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJhbnNsYXRpb25FZGl0b3IgZnJvbSAnLi9UcmFuc2xhdGlvbkVkaXRvcic7XHJcblxyXG4kKCcudHJhbnNsYXRpb25zLXRhYmxlJykuZGF0YVRhYmxlKHtcclxuICAgIHBhZ2VMZW5ndGg6IDIwLFxyXG4gICAgbGVuZ3RoTWVudTogWzEwLCAyMCwgNTAsIDEwMCwgMjAwXSxcclxuICAgIGRyYXdDYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgIG5ldyBUcmFuc2xhdGlvbkVkaXRvcigpO1xyXG4gICAgfSxcclxufSk7XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Modules/Translation/Resources/assets/admin/js/main.js\n");

/***/ }),

/***/ "./Modules/Translation/node_modules/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js":
/*!*******************************************************************************************************!*\
  !*** ./Modules/Translation/node_modules/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! X-editable - v1.5.1 \r\n* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery\r\n* http://github.com/vitalets/x-editable\r\n* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */\r\n/**\r\nForm with single input element, two buttons and two states: normal/loading.\r\nApplied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.\r\nEditableform is linked with one of input types, e.g. 'text', 'select' etc.\r\n\r\n@class editableform\r\n@uses text\r\n@uses textarea\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var EditableForm = function (div, options) {\r\n        this.options = $.extend({}, $.fn.editableform.defaults, options);\r\n        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.\r\n        if(!this.options.scope) {\r\n            this.options.scope = this;\r\n        }\r\n        //nothing shown after init\r\n    };\r\n\r\n    EditableForm.prototype = {\r\n        constructor: EditableForm,\r\n        initInput: function() {  //called once\r\n            //take input from options (as it is created in editable-element)\r\n            this.input = this.options.input;\r\n            \r\n            //set initial value\r\n            //todo: may be add check: typeof str === 'string' ? \r\n            this.value = this.input.str2value(this.options.value); \r\n            \r\n            //prerender: get input.$input\r\n            this.input.prerender();\r\n        },\r\n        initTemplate: function() {\r\n            this.$form = $($.fn.editableform.template); \r\n        },\r\n        initButtons: function() {\r\n            var $btn = this.$form.find('.editable-buttons');\r\n            $btn.append($.fn.editableform.buttons);\r\n            if(this.options.showbuttons === 'bottom') {\r\n                $btn.addClass('editable-buttons-bottom');\r\n            }\r\n        },\r\n        /**\r\n        Renders editableform\r\n\r\n        @method render\r\n        **/        \r\n        render: function() {\r\n            //init loader\r\n            this.$loading = $($.fn.editableform.loading);        \r\n            this.$div.empty().append(this.$loading);\r\n            \r\n            //init form template and buttons\r\n            this.initTemplate();\r\n            if(this.options.showbuttons) {\r\n                this.initButtons();\r\n            } else {\r\n                this.$form.find('.editable-buttons').remove();\r\n            }\r\n\r\n            //show loading state\r\n            this.showLoading();            \r\n            \r\n            //flag showing is form now saving value to server. \r\n            //It is needed to wait when closing form.\r\n            this.isSaving = false;\r\n            \r\n            /**        \r\n            Fired when rendering starts\r\n            @event rendering \r\n            @param {Object} event event object\r\n            **/            \r\n            this.$div.triggerHandler('rendering');\r\n            \r\n            //init input\r\n            this.initInput();\r\n            \r\n            //append input to form\r\n            this.$form.find('div.editable-input').append(this.input.$tpl);            \r\n            \r\n            //append form to container\r\n            this.$div.append(this.$form);\r\n            \r\n            //render input\r\n            $.when(this.input.render())\r\n            .then($.proxy(function () {\r\n                //setup input to submit automatically when no buttons shown\r\n                if(!this.options.showbuttons) {\r\n                    this.input.autosubmit(); \r\n                }\r\n                 \r\n                //attach 'cancel' handler\r\n                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));\r\n                \r\n                if(this.input.error) {\r\n                    this.error(this.input.error);\r\n                    this.$form.find('.editable-submit').attr('disabled', true);\r\n                    this.input.$input.attr('disabled', true);\r\n                    //prevent form from submitting\r\n                    this.$form.submit(function(e){ e.preventDefault(); });\r\n                } else {\r\n                    this.error(false);\r\n                    this.input.$input.removeAttr('disabled');\r\n                    this.$form.find('.editable-submit').removeAttr('disabled');\r\n                    var value = (this.value === null || this.value === undefined || this.value === '') ? this.options.defaultValue : this.value;\r\n                    this.input.value2input(value);\r\n                    //attach submit handler\r\n                    this.$form.submit($.proxy(this.submit, this));\r\n                }\r\n\r\n                /**        \r\n                Fired when form is rendered\r\n                @event rendered\r\n                @param {Object} event event object\r\n                **/            \r\n                this.$div.triggerHandler('rendered');                \r\n\r\n                this.showForm();\r\n                \r\n                //call postrender method to perform actions required visibility of form\r\n                if(this.input.postrender) {\r\n                    this.input.postrender();\r\n                }                \r\n            }, this));\r\n        },\r\n        cancel: function() {   \r\n            /**        \r\n            Fired when form was cancelled by user\r\n            @event cancel \r\n            @param {Object} event event object\r\n            **/              \r\n            this.$div.triggerHandler('cancel');\r\n        },\r\n        showLoading: function() {\r\n            var w, h;\r\n            if(this.$form) {\r\n                //set loading size equal to form\r\n                w = this.$form.outerWidth();\r\n                h = this.$form.outerHeight(); \r\n                if(w) {\r\n                    this.$loading.width(w);\r\n                }\r\n                if(h) {\r\n                    this.$loading.height(h);\r\n                }\r\n                this.$form.hide();\r\n            } else {\r\n                //stretch loading to fill container width\r\n                w = this.$loading.parent().width();\r\n                if(w) {\r\n                    this.$loading.width(w);\r\n                }\r\n            }\r\n            this.$loading.show(); \r\n        },\r\n\r\n        showForm: function(activate) {\r\n            this.$loading.hide();\r\n            this.$form.show();\r\n            if(activate !== false) {\r\n                this.input.activate(); \r\n            }\r\n            /**        \r\n            Fired when form is shown\r\n            @event show \r\n            @param {Object} event event object\r\n            **/                    \r\n            this.$div.triggerHandler('show');\r\n        },\r\n\r\n        error: function(msg) {\r\n            var $group = this.$form.find('.control-group'),\r\n                $block = this.$form.find('.editable-error-block'),\r\n                lines;\r\n\r\n            if(msg === false) {\r\n                $group.removeClass($.fn.editableform.errorGroupClass);\r\n                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide(); \r\n            } else {\r\n                //convert newline to <br> for more pretty error display\r\n                if(msg) {\r\n                    lines = (''+msg).split('\\n');\r\n                    for (var i = 0; i < lines.length; i++) {\r\n                        lines[i] = $('<div>').text(lines[i]).html();\r\n                    }\r\n                    msg = lines.join('<br>');\r\n                }\r\n                $group.addClass($.fn.editableform.errorGroupClass);\r\n                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();\r\n            }\r\n        },\r\n\r\n        submit: function(e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            \r\n            //get new value from input\r\n            var newValue = this.input.input2value(); \r\n\r\n            //validation: if validate returns string or truthy value - means error\r\n            //if returns object like {newValue: '...'} => submitted value is reassigned to it\r\n            var error = this.validate(newValue);\r\n            if ($.type(error) === 'object' && error.newValue !== undefined) {\r\n                newValue = error.newValue;\r\n                this.input.value2input(newValue);\r\n                if(typeof error.msg === 'string') {\r\n                    this.error(error.msg);\r\n                    this.showForm();\r\n                    return;\r\n                }\r\n            } else if (error) {\r\n                this.error(error);\r\n                this.showForm();\r\n                return;\r\n            } \r\n            \r\n            //if value not changed --> trigger 'nochange' event and return\r\n            /*jslint eqeq: true*/\r\n            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {\r\n            /*jslint eqeq: false*/                \r\n                /**        \r\n                Fired when value not changed but form is submitted. Requires savenochange = false.\r\n                @event nochange \r\n                @param {Object} event event object\r\n                **/                    \r\n                this.$div.triggerHandler('nochange');            \r\n                return;\r\n            } \r\n\r\n            //convert value for submitting to server\r\n            var submitValue = this.input.value2submit(newValue);\r\n            \r\n            this.isSaving = true;\r\n            \r\n            //sending data to server\r\n            $.when(this.save(submitValue))\r\n            .done($.proxy(function(response) {\r\n                this.isSaving = false;\r\n\r\n                //run success callback\r\n                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;\r\n\r\n                //if success callback returns false --> keep form open and do not activate input\r\n                if(res === false) {\r\n                    this.error(false);\r\n                    this.showForm(false);\r\n                    return;\r\n                }\r\n\r\n                //if success callback returns string -->  keep form open, show error and activate input               \r\n                if(typeof res === 'string') {\r\n                    this.error(res);\r\n                    this.showForm();\r\n                    return;\r\n                }\r\n\r\n                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted\r\n                //it is usefull if you want to chnage value in url-function\r\n                if(res && typeof res === 'object' && res.hasOwnProperty('newValue')) {\r\n                    newValue = res.newValue;\r\n                }\r\n\r\n                //clear error message\r\n                this.error(false);   \r\n                this.value = newValue;\r\n                /**        \r\n                Fired when form is submitted\r\n                @event save \r\n                @param {Object} event event object\r\n                @param {Object} params additional params\r\n                @param {mixed} params.newValue raw new value\r\n                @param {mixed} params.submitValue submitted value as string\r\n                @param {Object} params.response ajax response\r\n\r\n                @example\r\n                $('#form-div').on('save'), function(e, params){\r\n                    if(params.newValue === 'username') {...}\r\n                });\r\n                **/\r\n                this.$div.triggerHandler('save', {newValue: newValue, submitValue: submitValue, response: response});\r\n            }, this))\r\n            .fail($.proxy(function(xhr) {\r\n                this.isSaving = false;\r\n\r\n                var msg;\r\n                if(typeof this.options.error === 'function') {\r\n                    msg = this.options.error.call(this.options.scope, xhr, newValue);\r\n                } else {\r\n                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';\r\n                }\r\n\r\n                this.error(msg);\r\n                this.showForm();\r\n            }, this));\r\n        },\r\n\r\n        save: function(submitValue) {\r\n            //try parse composite pk defined as json string in data-pk \r\n            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true); \r\n            \r\n            var pk = (typeof this.options.pk === 'function') ? this.options.pk.call(this.options.scope) : this.options.pk,\r\n            /*\r\n              send on server in following cases:\r\n              1. url is function\r\n              2. url is string AND (pk defined OR send option = always) \r\n            */\r\n            send = !!(typeof this.options.url === 'function' || (this.options.url && ((this.options.send === 'always') || (this.options.send === 'auto' && pk !== null && pk !== undefined)))),\r\n            params;\r\n\r\n            if (send) { //send to server\r\n                this.showLoading();\r\n\r\n                //standard params\r\n                params = {\r\n                    name: this.options.name || '',\r\n                    value: submitValue,\r\n                    pk: pk \r\n                };\r\n\r\n                //additional params\r\n                if(typeof this.options.params === 'function') {\r\n                    params = this.options.params.call(this.options.scope, params);  \r\n                } else {\r\n                    //try parse json in single quotes (from data-params attribute)\r\n                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);   \r\n                    $.extend(params, this.options.params);\r\n                }\r\n\r\n                if(typeof this.options.url === 'function') { //user's function\r\n                    return this.options.url.call(this.options.scope, params);\r\n                } else {  \r\n                    //send ajax to server and return deferred object\r\n                    return $.ajax($.extend({\r\n                        url     : this.options.url,\r\n                        data    : params,\r\n                        type    : 'POST'\r\n                    }, this.options.ajaxOptions));\r\n                }\r\n            }\r\n        }, \r\n\r\n        validate: function (value) {\r\n            if (value === undefined) {\r\n                value = this.value;\r\n            }\r\n            if (typeof this.options.validate === 'function') {\r\n                return this.options.validate.call(this.options.scope, value);\r\n            }\r\n        },\r\n\r\n        option: function(key, value) {\r\n            if(key in this.options) {\r\n                this.options[key] = value;\r\n            }\r\n            \r\n            if(key === 'value') {\r\n                this.setValue(value);\r\n            }\r\n            \r\n            //do not pass option to input as it is passed in editable-element\r\n        },\r\n\r\n        setValue: function(value, convertStr) {\r\n            if(convertStr) {\r\n                this.value = this.input.str2value(value);\r\n            } else {\r\n                this.value = value;\r\n            }\r\n            \r\n            //if form is visible, update input\r\n            if(this.$form && this.$form.is(':visible')) {\r\n                this.input.value2input(this.value);\r\n            }            \r\n        }               \r\n    };\r\n\r\n    /*\r\n    Initialize editableform. Applied to jQuery object.\r\n\r\n    @method $().editableform(options)\r\n    @params {Object} options\r\n    @example\r\n    var $form = $('&lt;div&gt;').editableform({\r\n        type: 'text',\r\n        name: 'username',\r\n        url: '/post',\r\n        value: 'vitaliy'\r\n    });\r\n\r\n    //to display form you should call 'render' method\r\n    $form.editableform('render');     \r\n    */\r\n    $.fn.editableform = function (option) {\r\n        var args = arguments;\r\n        return this.each(function () {\r\n            var $this = $(this), \r\n            data = $this.data('editableform'), \r\n            options = typeof option === 'object' && option; \r\n            if (!data) {\r\n                $this.data('editableform', (data = new EditableForm(this, options)));\r\n            }\r\n\r\n            if (typeof option === 'string') { //call method \r\n                data[option].apply(data, Array.prototype.slice.call(args, 1));\r\n            } \r\n        });\r\n    };\r\n\r\n    //keep link to constructor to allow inheritance\r\n    $.fn.editableform.Constructor = EditableForm;    \r\n\r\n    //defaults\r\n    $.fn.editableform.defaults = {\r\n        /* see also defaults for input */\r\n\r\n        /**\r\n        Type of input. Can be <code>text|textarea|select|date|checklist</code>\r\n\r\n        @property type \r\n        @type string\r\n        @default 'text'\r\n        **/\r\n        type: 'text',\r\n        /**\r\n        Url for submit, e.g. <code>'/post'</code>  \r\n        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.\r\n\r\n        @property url \r\n        @type string|function\r\n        @default null\r\n        @example\r\n        url: function(params) {\r\n            var d = new $.Deferred;\r\n            if(params.value === 'abc') {\r\n                return d.reject('error message'); //returning error via deferred object\r\n            } else {\r\n                //async saving data in js model\r\n                someModel.asyncSaveMethod({\r\n                   ..., \r\n                   success: function(){\r\n                      d.resolve();\r\n                   }\r\n                }); \r\n                return d.promise();\r\n            }\r\n        } \r\n        **/        \r\n        url:null,\r\n        /**\r\n        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  \r\n        If defined as <code>function</code> - returned object **overwrites** original ajax data.\r\n        @example\r\n        params: function(params) {\r\n            //originally params contain pk, name and value\r\n            params.a = 1;\r\n            return params;\r\n        }\r\n\r\n        @property params \r\n        @type object|function\r\n        @default null\r\n        **/          \r\n        params:null,\r\n        /**\r\n        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute\r\n\r\n        @property name \r\n        @type string\r\n        @default null\r\n        **/         \r\n        name: null,\r\n        /**\r\n        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.\r\n        Can be calculated dynamically via function.\r\n\r\n        @property pk \r\n        @type string|object|function\r\n        @default null\r\n        **/         \r\n        pk: null,\r\n        /**\r\n        Initial value. If not defined - will be taken from element's content.\r\n        For __select__ type should be defined (as it is ID of shown text).\r\n\r\n        @property value \r\n        @type string|object\r\n        @default null\r\n        **/        \r\n        value: null,\r\n        /**\r\n        Value that will be displayed in input if original field value is empty (`null|undefined|''`).\r\n\r\n        @property defaultValue \r\n        @type string|object\r\n        @default null\r\n        @since 1.4.6\r\n        **/        \r\n        defaultValue: null,\r\n        /**\r\n        Strategy for sending data on server. Can be `auto|always|never`.\r\n        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.\r\n\r\n        @property send \r\n        @type string\r\n        @default 'auto'\r\n        **/          \r\n        send: 'auto', \r\n        /**\r\n        Function for client-side validation. If returns string - means validation not passed and string showed as error.\r\n        Since 1.5.1 you can modify submitted value by returning object from `validate`: \r\n        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`\r\n\r\n        @property validate \r\n        @type function\r\n        @default null\r\n        @example\r\n        validate: function(value) {\r\n            if($.trim(value) == '') {\r\n                return 'This field is required';\r\n            }\r\n        }\r\n        **/         \r\n        validate: null,\r\n        /**\r\n        Success callback. Called when value successfully sent on server and **response status = 200**.  \r\n        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>\r\n        or <code>{success: false, msg: \"server error\"}</code> you can check it inside this callback.  \r\n        If it returns **string** - means error occured and string is shown as error message.  \r\n        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  \r\n        Otherwise newValue simply rendered into element.\r\n        \r\n        @property success \r\n        @type function\r\n        @default null\r\n        @example\r\n        success: function(response, newValue) {\r\n            if(!response.success) return response.msg;\r\n        }\r\n        **/          \r\n        success: null,\r\n        /**\r\n        Error callback. Called when request failed (response status != 200).  \r\n        Usefull when you want to parse error response and display a custom message.\r\n        Must return **string** - the message to be displayed in the error block.\r\n                \r\n        @property error \r\n        @type function\r\n        @default null\r\n        @since 1.4.4\r\n        @example\r\n        error: function(response, newValue) {\r\n            if(response.status === 500) {\r\n                return 'Service unavailable. Please try later.';\r\n            } else {\r\n                return response.responseText;\r\n            }\r\n        }\r\n        **/          \r\n        error: null,\r\n        /**\r\n        Additional options for submit ajax request.\r\n        List of values: http://api.jquery.com/jQuery.ajax\r\n        \r\n        @property ajaxOptions \r\n        @type object\r\n        @default null\r\n        @since 1.1.1        \r\n        @example \r\n        ajaxOptions: {\r\n            type: 'put',\r\n            dataType: 'json'\r\n        }        \r\n        **/        \r\n        ajaxOptions: null,\r\n        /**\r\n        Where to show buttons: left(true)|bottom|false  \r\n        Form without buttons is auto-submitted.\r\n\r\n        @property showbuttons \r\n        @type boolean|string\r\n        @default true\r\n        @since 1.1.1\r\n        **/         \r\n        showbuttons: true,\r\n        /**\r\n        Scope for callback methods (success, validate).  \r\n        If <code>null</code> means editableform instance itself. \r\n\r\n        @property scope \r\n        @type DOMElement|object\r\n        @default null\r\n        @since 1.2.0\r\n        @private\r\n        **/            \r\n        scope: null,\r\n        /**\r\n        Whether to save or cancel value when it was not changed but form was submitted\r\n\r\n        @property savenochange \r\n        @type boolean\r\n        @default false\r\n        @since 1.2.0\r\n        **/\r\n        savenochange: false\r\n    };   \r\n\r\n    /*\r\n    Note: following params could redefined in engine: bootstrap or jqueryui:\r\n    Classes 'control-group' and 'editable-error-block' must always present!\r\n    */      \r\n    $.fn.editableform.template = '<form class=\"form-inline editableform\">'+\r\n    '<div class=\"control-group\">' + \r\n    '<div><div class=\"editable-input\"></div><div class=\"editable-buttons\"></div></div>'+\r\n    '<div class=\"editable-error-block\"></div>' + \r\n    '</div>' + \r\n    '</form>';\r\n\r\n    //loading div\r\n    $.fn.editableform.loading = '<div class=\"editableform-loading\"></div>';\r\n\r\n    //buttons\r\n    $.fn.editableform.buttons = '<button type=\"submit\" class=\"editable-submit\">ok</button>'+\r\n    '<button type=\"button\" class=\"editable-cancel\">cancel</button>';      \r\n\r\n    //error class attached to control-group\r\n    $.fn.editableform.errorGroupClass = null;  \r\n\r\n    //error class attached to editable-error-block\r\n    $.fn.editableform.errorBlockClass = 'editable-error';\r\n    \r\n    //engine\r\n    $.fn.editableform.engine = 'jquery';\r\n}(window.jQuery));\r\n\r\n/**\r\n* EditableForm utilites\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    //utils\r\n    $.fn.editableutils = {\r\n        /**\r\n        * classic JS inheritance function\r\n        */  \r\n        inherit: function (Child, Parent) {\r\n            var F = function() { };\r\n            F.prototype = Parent.prototype;\r\n            Child.prototype = new F();\r\n            Child.prototype.constructor = Child;\r\n            Child.superclass = Parent.prototype;\r\n        },\r\n\r\n        /**\r\n        * set caret position in input\r\n        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area\r\n        */        \r\n        setCursorPosition: function(elem, pos) {\r\n            if (elem.setSelectionRange) {\r\n                elem.setSelectionRange(pos, pos);\r\n            } else if (elem.createTextRange) {\r\n                var range = elem.createTextRange();\r\n                range.collapse(true);\r\n                range.moveEnd('character', pos);\r\n                range.moveStart('character', pos);\r\n                range.select();\r\n            }\r\n        },\r\n\r\n        /**\r\n        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)\r\n        * That allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">\r\n        * safe = true --> means no exception will be thrown\r\n        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery\r\n        */\r\n        tryParseJson: function(s, safe) {\r\n            if (typeof s === 'string' && s.length && s.match(/^[\\{\\[].*[\\}\\]]$/)) {\r\n                if (safe) {\r\n                    try {\r\n                        /*jslint evil: true*/\r\n                        s = (new Function('return ' + s))();\r\n                        /*jslint evil: false*/\r\n                    } catch (e) {} finally {\r\n                        return s;\r\n                    }\r\n                } else {\r\n                    /*jslint evil: true*/\r\n                    s = (new Function('return ' + s))();\r\n                    /*jslint evil: false*/\r\n                }\r\n            }\r\n            return s;\r\n        },\r\n\r\n        /**\r\n        * slice object by specified keys\r\n        */\r\n        sliceObj: function(obj, keys, caseSensitive /* default: false */) {\r\n            var key, keyLower, newObj = {};\r\n\r\n            if (!$.isArray(keys) || !keys.length) {\r\n                return newObj;\r\n            }\r\n\r\n            for (var i = 0; i < keys.length; i++) {\r\n                key = keys[i];\r\n                if (obj.hasOwnProperty(key)) {\r\n                    newObj[key] = obj[key];\r\n                }\r\n\r\n                if(caseSensitive === true) {\r\n                    continue;\r\n                }\r\n\r\n                //when getting data-* attributes via $.data() it's converted to lowercase.\r\n                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery\r\n                //workaround is code below.\r\n                keyLower = key.toLowerCase();\r\n                if (obj.hasOwnProperty(keyLower)) {\r\n                    newObj[key] = obj[keyLower];\r\n                }\r\n            }\r\n\r\n            return newObj;\r\n        },\r\n\r\n        /*\r\n        exclude complex objects from $.data() before pass to config\r\n        */\r\n        getConfigData: function($element) {\r\n            var data = {};\r\n            $.each($element.data(), function(k, v) {\r\n                if(typeof v !== 'object' || (v && typeof v === 'object' && (v.constructor === Object || v.constructor === Array))) {\r\n                    data[k] = v;\r\n                }\r\n            });\r\n            return data;\r\n        },\r\n\r\n        /*\r\n         returns keys of object\r\n        */\r\n        objectKeys: function(o) {\r\n            if (Object.keys) {\r\n                return Object.keys(o);  \r\n            } else {\r\n                if (o !== Object(o)) {\r\n                    throw new TypeError('Object.keys called on a non-object');\r\n                }\r\n                var k=[], p;\r\n                for (p in o) {\r\n                    if (Object.prototype.hasOwnProperty.call(o,p)) {\r\n                        k.push(p);\r\n                    }\r\n                }\r\n                return k;\r\n            }\r\n\r\n        },\r\n        \r\n       /**\r\n        method to escape html.\r\n       **/\r\n       escape: function(str) {\r\n           return $('<div>').text(str).html();\r\n       },\r\n       \r\n       /*\r\n        returns array items from sourceData having value property equal or inArray of 'value'\r\n       */\r\n       itemsByValue: function(value, sourceData, valueProp) {\r\n           if(!sourceData || value === null) {\r\n               return [];\r\n           }\r\n           \r\n           if (typeof(valueProp) !== \"function\") {\r\n               var idKey = valueProp || 'value';\r\n               valueProp = function (e) { return e[idKey]; };\r\n           }\r\n                      \r\n           var isValArray = $.isArray(value),\r\n           result = [], \r\n           that = this;\r\n\r\n           $.each(sourceData, function(i, o) {\r\n               if(o.children) {\r\n                   result = result.concat(that.itemsByValue(value, o.children, valueProp));\r\n               } else {\r\n                   /*jslint eqeq: true*/\r\n                   if(isValArray) {\r\n                       if($.grep(value, function(v){  return v == (o && typeof o === 'object' ? valueProp(o) : o); }).length) {\r\n                           result.push(o); \r\n                       }\r\n                   } else {\r\n                       var itemValue = (o && (typeof o === 'object')) ? valueProp(o) : o;\r\n                       if(value == itemValue) {\r\n                           result.push(o); \r\n                       }\r\n                   }\r\n                   /*jslint eqeq: false*/\r\n               }\r\n           });\r\n           \r\n           return result;\r\n       },\r\n       \r\n       /*\r\n       Returns input by options: type, mode. \r\n       */\r\n       createInput: function(options) {\r\n           var TypeConstructor, typeOptions, input,\r\n           type = options.type;\r\n\r\n           //`date` is some kind of virtual type that is transformed to one of exact types\r\n           //depending on mode and core lib\r\n           if(type === 'date') {\r\n               //inline\r\n               if(options.mode === 'inline') {\r\n                   if($.fn.editabletypes.datefield) {\r\n                       type = 'datefield';\r\n                   } else if($.fn.editabletypes.dateuifield) {\r\n                       type = 'dateuifield';\r\n                   }\r\n               //popup\r\n               } else {\r\n                   if($.fn.editabletypes.date) {\r\n                       type = 'date';\r\n                   } else if($.fn.editabletypes.dateui) {\r\n                       type = 'dateui';\r\n                   }\r\n               }\r\n               \r\n               //if type still `date` and not exist in types, replace with `combodate` that is base input\r\n               if(type === 'date' && !$.fn.editabletypes.date) {\r\n                   type = 'combodate';\r\n               } \r\n           }\r\n           \r\n           //`datetime` should be datetimefield in 'inline' mode\r\n           if(type === 'datetime' && options.mode === 'inline') {\r\n             type = 'datetimefield';  \r\n           }           \r\n\r\n           //change wysihtml5 to textarea for jquery UI and plain versions\r\n           if(type === 'wysihtml5' && !$.fn.editabletypes[type]) {\r\n               type = 'textarea';\r\n           }\r\n\r\n           //create input of specified type. Input will be used for converting value, not in form\r\n           if(typeof $.fn.editabletypes[type] === 'function') {\r\n               TypeConstructor = $.fn.editabletypes[type];\r\n               typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));\r\n               input = new TypeConstructor(typeOptions);\r\n               return input;\r\n           } else {\r\n               $.error('Unknown type: '+ type);\r\n               return false; \r\n           }  \r\n       },\r\n       \r\n       //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr\r\n       supportsTransitions: function () {\r\n           var b = document.body || document.documentElement,\r\n               s = b.style,\r\n               p = 'transition',\r\n               v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];\r\n               \r\n           if(typeof s[p] === 'string') {\r\n               return true; \r\n           }\r\n\r\n           // Tests for vendor specific prop\r\n           p = p.charAt(0).toUpperCase() + p.substr(1);\r\n           for(var i=0; i<v.length; i++) {\r\n               if(typeof s[v[i] + p] === 'string') { \r\n                   return true; \r\n               }\r\n           }\r\n           return false;\r\n       }            \r\n       \r\n    };      \r\n}(window.jQuery));\r\n\r\n/**\r\nAttaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>\r\nThis method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>\r\nFinal realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>\r\nApplied as jQuery method.\r\n\r\n@class editableContainer\r\n@uses editableform\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    var Popup = function (element, options) {\r\n        this.init(element, options);\r\n    };\r\n    \r\n    var Inline = function (element, options) {\r\n        this.init(element, options);\r\n    };    \r\n\r\n    //methods\r\n    Popup.prototype = {\r\n        containerName: null, //method to call container on element\r\n        containerDataName: null, //object name in element's .data()\r\n        innerCss: null, //tbd in child class\r\n        containerClass: 'editable-container editable-popup', //css class applied to container element\r\n        defaults: {}, //container itself defaults\r\n        \r\n        init: function(element, options) {\r\n            this.$element = $(element);\r\n            //since 1.4.1 container do not use data-* directly as they already merged into options.\r\n            this.options = $.extend({}, $.fn.editableContainer.defaults, options);         \r\n            this.splitOptions();\r\n            \r\n            //set scope of form callbacks to element\r\n            this.formOptions.scope = this.$element[0]; \r\n            \r\n            this.initContainer();\r\n            \r\n            //flag to hide container, when saving value will finish\r\n            this.delayedHide = false;\r\n\r\n            //bind 'destroyed' listener to destroy container when element is removed from dom\r\n            this.$element.on('destroyed', $.proxy(function(){\r\n                this.destroy();\r\n            }, this)); \r\n            \r\n            //attach document handler to close containers on click / escape\r\n            if(!$(document).data('editable-handlers-attached')) {\r\n                //close all on escape\r\n                $(document).on('keyup.editable', function (e) {\r\n                    if (e.which === 27) {\r\n                        $('.editable-open').editableContainer('hide');\r\n                        //todo: return focus on element \r\n                    }\r\n                });\r\n\r\n                //close containers when click outside \r\n                //(mousedown could be better than click, it closes everything also on drag drop)\r\n                $(document).on('click.editable', function(e) {\r\n                    var $target = $(e.target), i,\r\n                        exclude_classes = ['.editable-container', \r\n                                           '.ui-datepicker-header', \r\n                                           '.datepicker', //in inline mode datepicker is rendered into body\r\n                                           '.modal-backdrop', \r\n                                           '.bootstrap-wysihtml5-insert-image-modal', \r\n                                           '.bootstrap-wysihtml5-insert-link-modal'\r\n                                           ];\r\n                    \r\n                    //check if element is detached. It occurs when clicking in bootstrap datepicker\r\n                    if (!$.contains(document.documentElement, e.target)) {\r\n                      return;\r\n                    }\r\n\r\n                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document\r\n                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199\r\n                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec\r\n                    if($target.is(document)) {\r\n                       return; \r\n                    }\r\n                    \r\n                    //if click inside one of exclude classes --> no nothing\r\n                    for(i=0; i<exclude_classes.length; i++) {\r\n                         if($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {\r\n                             return;\r\n                         }\r\n                    }\r\n                      \r\n                    //close all open containers (except one - target)\r\n                    Popup.prototype.closeOthers(e.target);\r\n                });\r\n                \r\n                $(document).data('editable-handlers-attached', true);\r\n            }                        \r\n        },\r\n\r\n        //split options on containerOptions and formOptions\r\n        splitOptions: function() {\r\n            this.containerOptions = {};\r\n            this.formOptions = {};\r\n            \r\n            if(!$.fn[this.containerName]) {\r\n                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');   \r\n            }\r\n            \r\n            //keys defined in container defaults go to container, others go to form\r\n            for(var k in this.options) {\r\n              if(k in this.defaults) {\r\n                 this.containerOptions[k] = this.options[k];\r\n              } else {\r\n                 this.formOptions[k] = this.options[k];\r\n              } \r\n            }\r\n        },\r\n        \r\n        /*\r\n        Returns jquery object of container\r\n        @method tip()\r\n        */         \r\n        tip: function() {\r\n            return this.container() ? this.container().$tip : null;\r\n        },\r\n\r\n        /* returns container object */\r\n        container: function() {\r\n            var container;\r\n            //first, try get it by `containerDataName`\r\n            if(this.containerDataName) {\r\n                if(container = this.$element.data(this.containerDataName)) {\r\n                    return container;\r\n                }\r\n            }\r\n            //second, try `containerName`\r\n            container = this.$element.data(this.containerName);\r\n            return container;\r\n        },\r\n\r\n        /* call native method of underlying container, e.g. this.$element.popover('method') */ \r\n        call: function() {\r\n            this.$element[this.containerName].apply(this.$element, arguments); \r\n        },        \r\n        \r\n        initContainer: function(){\r\n            this.call(this.containerOptions);\r\n        },\r\n\r\n        renderForm: function() {\r\n            this.$form\r\n            .editableform(this.formOptions)\r\n            .on({\r\n                save: $.proxy(this.save, this), //click on submit button (value changed)\r\n                nochange: $.proxy(function(){ this.hide('nochange'); }, this), //click on submit button (value NOT changed)                \r\n                cancel: $.proxy(function(){ this.hide('cancel'); }, this), //click on calcel button\r\n                show: $.proxy(function() {\r\n                    if(this.delayedHide) {\r\n                        this.hide(this.delayedHide.reason);\r\n                        this.delayedHide = false;\r\n                    } else {\r\n                        this.setPosition();\r\n                    }\r\n                }, this), //re-position container every time form is shown (occurs each time after loading state)\r\n                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown\r\n                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed \r\n                rendered: $.proxy(function(){\r\n                    /**        \r\n                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  \r\n                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.\r\n                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     \r\n                    \r\n                    @event shown \r\n                    @param {Object} event event object\r\n                    @example\r\n                    $('#username').on('shown', function(e, editable) {\r\n                        editable.input.$input.val('overwriting value of input..');\r\n                    });                     \r\n                    **/                      \r\n                    /*\r\n                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  \r\n                    */\r\n                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable')); \r\n                }, this) \r\n            })\r\n            .editableform('render');\r\n        },        \r\n\r\n        /**\r\n        Shows container with form\r\n        @method show()\r\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\r\n        **/\r\n        /* Note: poshytip owerwrites this method totally! */          \r\n        show: function (closeAll) {\r\n            this.$element.addClass('editable-open');\r\n            if(closeAll !== false) {\r\n                //close all open containers (except this)\r\n                this.closeOthers(this.$element[0]);  \r\n            }\r\n            \r\n            //show container itself\r\n            this.innerShow();\r\n            this.tip().addClass(this.containerClass);\r\n\r\n            /*\r\n            Currently, form is re-rendered on every show. \r\n            The main reason is that we dont know, what will container do with content when closed:\r\n            remove(), detach() or just hide() - it depends on container.\r\n            \r\n            Detaching form itself before hide and re-insert before show is good solution, \r\n            but visually it looks ugly --> container changes size before hide.  \r\n            */             \r\n            \r\n            //if form already exist - delete previous data \r\n            if(this.$form) {\r\n                //todo: destroy prev data!\r\n                //this.$form.destroy();\r\n            }\r\n\r\n            this.$form = $('<div>');\r\n            \r\n            //insert form into container body\r\n            if(this.tip().is(this.innerCss)) {\r\n                //for inline container\r\n                this.tip().append(this.$form); \r\n            } else {\r\n                this.tip().find(this.innerCss).append(this.$form);\r\n            } \r\n            \r\n            //render form\r\n            this.renderForm();\r\n        },\r\n\r\n        /**\r\n        Hides container with form\r\n        @method hide()\r\n        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>\r\n        **/         \r\n        hide: function(reason) {  \r\n            if(!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {\r\n                return;\r\n            }\r\n            \r\n            //if form is saving value, schedule hide\r\n            if(this.$form.data('editableform').isSaving) {\r\n                this.delayedHide = {reason: reason};\r\n                return;    \r\n            } else {\r\n                this.delayedHide = false;\r\n            }\r\n\r\n            this.$element.removeClass('editable-open');   \r\n            this.innerHide();\r\n\r\n            /**\r\n            Fired when container was hidden. It occurs on both save or cancel.  \r\n            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.\r\n            The workaround is to check `arguments.length` that is always `2` for x-editable. \r\n\r\n            @event hidden \r\n            @param {object} event event object\r\n            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>\r\n            @example\r\n            $('#username').on('hidden', function(e, reason) {\r\n                if(reason === 'save' || reason === 'cancel') {\r\n                    //auto-open next editable\r\n                    $(this).closest('tr').next().find('.editable').editable('show');\r\n                } \r\n            });\r\n            **/\r\n            this.$element.triggerHandler('hidden', reason || 'manual');   \r\n        },\r\n\r\n        /* internal show method. To be overwritten in child classes */\r\n        innerShow: function () {\r\n             \r\n        },        \r\n\r\n        /* internal hide method. To be overwritten in child classes */\r\n        innerHide: function () {\r\n\r\n        },\r\n        \r\n        /**\r\n        Toggles container visibility (show / hide)\r\n        @method toggle()\r\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\r\n        **/          \r\n        toggle: function(closeAll) {\r\n            if(this.container() && this.tip() && this.tip().is(':visible')) {\r\n                this.hide();\r\n            } else {\r\n                this.show(closeAll);\r\n            } \r\n        },\r\n\r\n        /*\r\n        Updates the position of container when content changed.\r\n        @method setPosition()\r\n        */       \r\n        setPosition: function() {\r\n            //tbd in child class\r\n        },\r\n\r\n        save: function(e, params) {\r\n            /**        \r\n            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance\r\n            \r\n            @event save \r\n            @param {Object} event event object\r\n            @param {Object} params additional params\r\n            @param {mixed} params.newValue submitted value\r\n            @param {Object} params.response ajax response\r\n            @example\r\n            $('#username').on('save', function(e, params) {\r\n                //assuming server response: '{success: true}'\r\n                var pk = $(this).data('editableContainer').options.pk;\r\n                if(params.response && params.response.success) {\r\n                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');\r\n                } else {\r\n                    alert('error!'); \r\n                } \r\n            });\r\n            **/             \r\n            this.$element.triggerHandler('save', params);\r\n            \r\n            //hide must be after trigger, as saving value may require methods of plugin, applied to input\r\n            this.hide('save');\r\n        },\r\n\r\n        /**\r\n        Sets new option\r\n        \r\n        @method option(key, value)\r\n        @param {string} key \r\n        @param {mixed} value \r\n        **/         \r\n        option: function(key, value) {\r\n            this.options[key] = value;\r\n            if(key in this.containerOptions) {\r\n                this.containerOptions[key] = value;\r\n                this.setContainerOption(key, value); \r\n            } else {\r\n                this.formOptions[key] = value;\r\n                if(this.$form) {\r\n                    this.$form.editableform('option', key, value);  \r\n                }\r\n            }\r\n        },\r\n        \r\n        setContainerOption: function(key, value) {\r\n            this.call('option', key, value);\r\n        },\r\n\r\n        /**\r\n        Destroys the container instance\r\n        @method destroy()\r\n        **/        \r\n        destroy: function() {\r\n            this.hide();\r\n            this.innerDestroy();\r\n            this.$element.off('destroyed');\r\n            this.$element.removeData('editableContainer');\r\n        },\r\n        \r\n        /* to be overwritten in child classes */\r\n        innerDestroy: function() {\r\n            \r\n        }, \r\n        \r\n        /*\r\n        Closes other containers except one related to passed element. \r\n        Other containers can be cancelled or submitted (depends on onblur option)\r\n        */\r\n        closeOthers: function(element) {\r\n            $('.editable-open').each(function(i, el){\r\n                //do nothing with passed element and it's children\r\n                if(el === element || $(el).find(element).length) {\r\n                    return;\r\n                }\r\n\r\n                //otherwise cancel or submit all open containers \r\n                var $el = $(el),\r\n                ec = $el.data('editableContainer');\r\n\r\n                if(!ec) {\r\n                    return;  \r\n                }\r\n                \r\n                if(ec.options.onblur === 'cancel') {\r\n                    $el.data('editableContainer').hide('onblur');\r\n                } else if(ec.options.onblur === 'submit') {\r\n                    $el.data('editableContainer').tip().find('form').submit();\r\n                }\r\n            });\r\n\r\n        },\r\n        \r\n        /**\r\n        Activates input of visible container (e.g. set focus)\r\n        @method activate()\r\n        **/         \r\n        activate: function() {\r\n            if(this.tip && this.tip().is(':visible') && this.$form) {\r\n               this.$form.data('editableform').input.activate(); \r\n            }\r\n        } \r\n\r\n    };\r\n\r\n    /**\r\n    jQuery method to initialize editableContainer.\r\n    \r\n    @method $().editableContainer(options)\r\n    @params {Object} options\r\n    @example\r\n    $('#edit').editableContainer({\r\n        type: 'text',\r\n        url: '/post',\r\n        pk: 1,\r\n        value: 'hello'\r\n    });\r\n    **/  \r\n    $.fn.editableContainer = function (option) {\r\n        var args = arguments;\r\n        return this.each(function () {\r\n            var $this = $(this),\r\n            dataKey = 'editableContainer', \r\n            data = $this.data(dataKey),\r\n            options = typeof option === 'object' && option,\r\n            Constructor = (options.mode === 'inline') ? Inline : Popup;             \r\n\r\n            if (!data) {\r\n                $this.data(dataKey, (data = new Constructor(this, options)));\r\n            }\r\n\r\n            if (typeof option === 'string') { //call method \r\n                data[option].apply(data, Array.prototype.slice.call(args, 1));\r\n            }            \r\n        });\r\n    };     \r\n\r\n    //store constructors\r\n    $.fn.editableContainer.Popup = Popup;\r\n    $.fn.editableContainer.Inline = Inline;\r\n\r\n    //defaults\r\n    $.fn.editableContainer.defaults = {\r\n        /**\r\n        Initial value of form input\r\n\r\n        @property value \r\n        @type mixed\r\n        @default null\r\n        @private\r\n        **/        \r\n        value: null,\r\n        /**\r\n        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.\r\n\r\n        @property placement \r\n        @type string\r\n        @default 'top'\r\n        **/        \r\n        placement: 'top',\r\n        /**\r\n        Whether to hide container on save/cancel.\r\n\r\n        @property autohide \r\n        @type boolean\r\n        @default true\r\n        @private \r\n        **/        \r\n        autohide: true,\r\n        /**\r\n        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.  \r\n        Setting <code>ignore</code> allows to have several containers open. \r\n\r\n        @property onblur \r\n        @type string\r\n        @default 'cancel'\r\n        @since 1.1.1\r\n        **/        \r\n        onblur: 'cancel',\r\n        \r\n        /**\r\n        Animation speed (inline mode only)\r\n        @property anim \r\n        @type string\r\n        @default false\r\n        **/        \r\n        anim: false,\r\n        \r\n        /**\r\n        Mode of editable, can be `popup` or `inline` \r\n        \r\n        @property mode \r\n        @type string         \r\n        @default 'popup'\r\n        @since 1.4.0        \r\n        **/        \r\n        mode: 'popup'        \r\n    };\r\n\r\n    /* \r\n    * workaround to have 'destroyed' event to destroy popover when element is destroyed\r\n    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom\r\n    */\r\n    jQuery.event.special.destroyed = {\r\n        remove: function(o) {\r\n            if (o.handler) {\r\n                o.handler();\r\n            }\r\n        }\r\n    };    \r\n\r\n}(window.jQuery));\r\n\r\n/**\r\n* Editable Inline \r\n* ---------------------\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    //copy prototype from EditableContainer\r\n    //extend methods\r\n    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {\r\n        containerName: 'editableform',\r\n        innerCss: '.editable-inline',\r\n        containerClass: 'editable-container editable-inline', //css class applied to container element\r\n                 \r\n        initContainer: function(){\r\n            //container is <span> element\r\n            this.$tip = $('<span></span>');\r\n            \r\n            //convert anim to miliseconds (int)\r\n            if(!this.options.anim) {\r\n                this.options.anim = 0;\r\n            }         \r\n        },\r\n        \r\n        splitOptions: function() {\r\n            //all options are passed to form\r\n            this.containerOptions = {};\r\n            this.formOptions = this.options;\r\n        },\r\n        \r\n        tip: function() {\r\n           return this.$tip; \r\n        },\r\n        \r\n        innerShow: function () {\r\n            this.$element.hide();\r\n            this.tip().insertAfter(this.$element).show();\r\n        }, \r\n        \r\n        innerHide: function () {\r\n            this.$tip.hide(this.options.anim, $.proxy(function() {\r\n                this.$element.show();\r\n                this.innerDestroy();\r\n            }, this)); \r\n        },\r\n        \r\n        innerDestroy: function() {\r\n            if(this.tip()) {\r\n                this.tip().empty().remove();\r\n            }\r\n        } \r\n    });\r\n\r\n}(window.jQuery));\r\n/**\r\nMakes editable any HTML element on the page. Applied as jQuery method.\r\n\r\n@class editable\r\n@uses editableContainer\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    var Editable = function (element, options) {\r\n        this.$element = $(element);\r\n        //data-* has more priority over js options: because dynamically created elements may change data-* \r\n        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));  \r\n        if(this.options.selector) {\r\n            this.initLive();\r\n        } else {\r\n            this.init();\r\n        }\r\n        \r\n        //check for transition support\r\n        if(this.options.highlight && !$.fn.editableutils.supportsTransitions()) {\r\n            this.options.highlight = false;\r\n        }\r\n    };\r\n\r\n    Editable.prototype = {\r\n        constructor: Editable, \r\n        init: function () {\r\n            var isValueByText = false, \r\n                doAutotext, finalize;\r\n\r\n            //name\r\n            this.options.name = this.options.name || this.$element.attr('id');\r\n             \r\n            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)\r\n            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)\r\n            this.options.scope = this.$element[0]; \r\n            this.input = $.fn.editableutils.createInput(this.options);\r\n            if(!this.input) {\r\n                return; \r\n            }            \r\n\r\n            //set value from settings or by element's text\r\n            if (this.options.value === undefined || this.options.value === null) {\r\n                this.value = this.input.html2value($.trim(this.$element.html()));\r\n                isValueByText = true;\r\n            } else {\r\n                /*\r\n                  value can be string when received from 'data-value' attribute\r\n                  for complext objects value can be set as json string in data-value attribute, \r\n                  e.g. data-value=\"{city: 'Moscow', street: 'Lenina'}\"\r\n                */\r\n                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true); \r\n                if(typeof this.options.value === 'string') {\r\n                    this.value = this.input.str2value(this.options.value);\r\n                } else {\r\n                    this.value = this.options.value;\r\n                }\r\n            }\r\n            \r\n            //add 'editable' class to every editable element\r\n            this.$element.addClass('editable');\r\n            \r\n            //specifically for \"textarea\" add class .editable-pre-wrapped to keep linebreaks\r\n            if(this.input.type === 'textarea') {\r\n                this.$element.addClass('editable-pre-wrapped');\r\n            }\r\n            \r\n            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)\r\n            if(this.options.toggle !== 'manual') {\r\n                this.$element.addClass('editable-click');\r\n                this.$element.on(this.options.toggle + '.editable', $.proxy(function(e){\r\n                    //prevent following link if editable enabled\r\n                    if(!this.options.disabled) {\r\n                        e.preventDefault();\r\n                    }\r\n                    \r\n                    //stop propagation not required because in document click handler it checks event target\r\n                    //e.stopPropagation();\r\n                    \r\n                    if(this.options.toggle === 'mouseenter') {\r\n                        //for hover only show container\r\n                        this.show();\r\n                    } else {\r\n                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener\r\n                        var closeAll = (this.options.toggle !== 'click');\r\n                        this.toggle(closeAll);\r\n                    }\r\n                }, this));\r\n            } else {\r\n                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually\r\n            }\r\n            \r\n            //if display is function it's far more convinient to have autotext = always to render correctly on init\r\n            //see https://github.com/vitalets/x-editable-yii/issues/34\r\n            if(typeof this.options.display === 'function') {\r\n                this.options.autotext = 'always';\r\n            }\r\n            \r\n            //check conditions for autotext:\r\n            switch(this.options.autotext) {\r\n              case 'always':\r\n               doAutotext = true;\r\n              break;\r\n              case 'auto':\r\n                //if element text is empty and value is defined and value not generated by text --> run autotext\r\n                doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;\r\n              break;\r\n              default:\r\n               doAutotext = false;\r\n            }\r\n\r\n            //depending on autotext run render() or just finilize init\r\n            $.when(doAutotext ? this.render() : true).then($.proxy(function() {\r\n                if(this.options.disabled) {\r\n                    this.disable();\r\n                } else {\r\n                    this.enable(); \r\n                }\r\n               /**        \r\n               Fired when element was initialized by `$().editable()` method. \r\n               Please note that you should setup `init` handler **before** applying `editable`. \r\n                              \r\n               @event init \r\n               @param {Object} event event object\r\n               @param {Object} editable editable instance (as here it cannot accessed via data('editable'))\r\n               @since 1.2.0\r\n               @example\r\n               $('#username').on('init', function(e, editable) {\r\n                   alert('initialized ' + editable.options.name);\r\n               });\r\n               $('#username').editable();\r\n               **/                  \r\n                this.$element.triggerHandler('init', this);\r\n            }, this));\r\n        },\r\n\r\n        /*\r\n         Initializes parent element for live editables \r\n        */\r\n        initLive: function() {\r\n           //store selector \r\n           var selector = this.options.selector;\r\n           //modify options for child elements\r\n           this.options.selector = false; \r\n           this.options.autotext = 'never';\r\n           //listen toggle events\r\n           this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function(e){\r\n               var $target = $(e.target);\r\n               if(!$target.data('editable')) {\r\n                   //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)\r\n                   //see https://github.com/vitalets/x-editable/issues/137 \r\n                   if($target.hasClass(this.options.emptyclass)) {\r\n                      $target.empty();\r\n                   }\r\n                   $target.editable(this.options).trigger(e);\r\n               }\r\n           }, this)); \r\n        },\r\n        \r\n        /*\r\n        Renders value into element's text.\r\n        Can call custom display method from options.\r\n        Can return deferred object.\r\n        @method render()\r\n        @param {mixed} response server response (if exist) to pass into display function\r\n        */          \r\n        render: function(response) {\r\n            //do not display anything\r\n            if(this.options.display === false) {\r\n                return;\r\n            }\r\n            \r\n            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded\r\n            if(this.input.value2htmlFinal) {\r\n                return this.input.value2html(this.value, this.$element[0], this.options.display, response); \r\n            //if display method defined --> use it    \r\n            } else if(typeof this.options.display === 'function') {\r\n                return this.options.display.call(this.$element[0], this.value, response);\r\n            //else use input's original value2html() method    \r\n            } else {\r\n                return this.input.value2html(this.value, this.$element[0]); \r\n            }\r\n        },\r\n        \r\n        /**\r\n        Enables editable\r\n        @method enable()\r\n        **/          \r\n        enable: function() {\r\n            this.options.disabled = false;\r\n            this.$element.removeClass('editable-disabled');\r\n            this.handleEmpty(this.isEmpty);\r\n            if(this.options.toggle !== 'manual') {\r\n                if(this.$element.attr('tabindex') === '-1') {    \r\n                    this.$element.removeAttr('tabindex');                                \r\n                }\r\n            }\r\n        },\r\n        \r\n        /**\r\n        Disables editable\r\n        @method disable()\r\n        **/         \r\n        disable: function() {\r\n            this.options.disabled = true; \r\n            this.hide();           \r\n            this.$element.addClass('editable-disabled');\r\n            this.handleEmpty(this.isEmpty);\r\n            //do not stop focus on this element\r\n            this.$element.attr('tabindex', -1);                \r\n        },\r\n        \r\n        /**\r\n        Toggles enabled / disabled state of editable element\r\n        @method toggleDisabled()\r\n        **/         \r\n        toggleDisabled: function() {\r\n            if(this.options.disabled) {\r\n                this.enable();\r\n            } else { \r\n                this.disable(); \r\n            }\r\n        },  \r\n        \r\n        /**\r\n        Sets new option\r\n        \r\n        @method option(key, value)\r\n        @param {string|object} key option name or object with several options\r\n        @param {mixed} value option new value\r\n        @example\r\n        $('.editable').editable('option', 'pk', 2);\r\n        **/          \r\n        option: function(key, value) {\r\n            //set option(s) by object\r\n            if(key && typeof key === 'object') {\r\n               $.each(key, $.proxy(function(k, v){\r\n                  this.option($.trim(k), v); \r\n               }, this)); \r\n               return;\r\n            }\r\n\r\n            //set option by string             \r\n            this.options[key] = value;                          \r\n            \r\n            //disabled\r\n            if(key === 'disabled') {\r\n               return value ? this.disable() : this.enable();\r\n            } \r\n            \r\n            //value\r\n            if(key === 'value') {\r\n                this.setValue(value);\r\n            }\r\n            \r\n            //transfer new option to container! \r\n            if(this.container) {\r\n                this.container.option(key, value);  \r\n            }\r\n             \r\n            //pass option to input directly (as it points to the same in form)\r\n            if(this.input.option) {\r\n                this.input.option(key, value);\r\n            }\r\n            \r\n        },              \r\n        \r\n        /*\r\n        * set emptytext if element is empty\r\n        */\r\n        handleEmpty: function (isEmpty) {\r\n            //do not handle empty if we do not display anything\r\n            if(this.options.display === false) {\r\n                return;\r\n            }\r\n\r\n            /* \r\n            isEmpty may be set directly as param of method.\r\n            It is required when we enable/disable field and can't rely on content \r\n            as node content is text: \"Empty\" that is not empty %)\r\n            */\r\n            if(isEmpty !== undefined) { \r\n                this.isEmpty = isEmpty;\r\n            } else {\r\n                //detect empty\r\n                //for some inputs we need more smart check\r\n                //e.g. wysihtml5 may have <br>, <p></p>, <img>\r\n                if(typeof(this.input.isEmpty) === 'function') {\r\n                    this.isEmpty = this.input.isEmpty(this.$element);                    \r\n                } else {\r\n                    this.isEmpty = $.trim(this.$element.html()) === '';\r\n                }\r\n            }           \r\n            \r\n            //emptytext shown only for enabled\r\n            if(!this.options.disabled) {\r\n                if (this.isEmpty) {\r\n                    this.$element.html(this.options.emptytext);\r\n                    if(this.options.emptyclass) {\r\n                        this.$element.addClass(this.options.emptyclass);\r\n                    }\r\n                } else if(this.options.emptyclass) {\r\n                    this.$element.removeClass(this.options.emptyclass);\r\n                }\r\n            } else {\r\n                //below required if element disable property was changed\r\n                if(this.isEmpty) {\r\n                    this.$element.empty();\r\n                    if(this.options.emptyclass) {\r\n                        this.$element.removeClass(this.options.emptyclass);\r\n                    }\r\n                }\r\n            }\r\n        },        \r\n        \r\n        /**\r\n        Shows container with form\r\n        @method show()\r\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\r\n        **/  \r\n        show: function (closeAll) {\r\n            if(this.options.disabled) {\r\n                return;\r\n            }\r\n            \r\n            //init editableContainer: popover, tooltip, inline, etc..\r\n            if(!this.container) {\r\n                var containerOptions = $.extend({}, this.options, {\r\n                    value: this.value,\r\n                    input: this.input //pass input to form (as it is already created)\r\n                });\r\n                this.$element.editableContainer(containerOptions);\r\n                //listen `save` event \r\n                this.$element.on(\"save.internal\", $.proxy(this.save, this));\r\n                this.container = this.$element.data('editableContainer'); \r\n            } else if(this.container.tip().is(':visible')) {\r\n                return;\r\n            }      \r\n            \r\n            //show container\r\n            this.container.show(closeAll);\r\n        },\r\n        \r\n        /**\r\n        Hides container with form\r\n        @method hide()\r\n        **/       \r\n        hide: function () {   \r\n            if(this.container) {  \r\n                this.container.hide();\r\n            }\r\n        },\r\n        \r\n        /**\r\n        Toggles container visibility (show / hide)\r\n        @method toggle()\r\n        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.\r\n        **/  \r\n        toggle: function(closeAll) {\r\n            if(this.container && this.container.tip().is(':visible')) {\r\n                this.hide();\r\n            } else {\r\n                this.show(closeAll);\r\n            }\r\n        },\r\n        \r\n        /*\r\n        * called when form was submitted\r\n        */          \r\n        save: function(e, params) {\r\n            //mark element with unsaved class if needed\r\n            if(this.options.unsavedclass) {\r\n                /*\r\n                 Add unsaved css to element if:\r\n                  - url is not user's function \r\n                  - value was not sent to server\r\n                  - params.response === undefined, that means data was not sent\r\n                  - value changed \r\n                */\r\n                var sent = false;\r\n                sent = sent || typeof this.options.url === 'function';\r\n                sent = sent || this.options.display === false; \r\n                sent = sent || params.response !== undefined; \r\n                sent = sent || (this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(params.newValue)); \r\n                \r\n                if(sent) {\r\n                    this.$element.removeClass(this.options.unsavedclass); \r\n                } else {\r\n                    this.$element.addClass(this.options.unsavedclass);                    \r\n                }\r\n            }\r\n            \r\n            //highlight when saving\r\n            if(this.options.highlight) {\r\n                var $e = this.$element,\r\n                    bgColor = $e.css('background-color');\r\n                    \r\n                $e.css('background-color', this.options.highlight);\r\n                setTimeout(function(){\r\n                    if(bgColor === 'transparent') {\r\n                        bgColor = ''; \r\n                    }\r\n                    $e.css('background-color', bgColor);\r\n                    $e.addClass('editable-bg-transition');\r\n                    setTimeout(function(){\r\n                       $e.removeClass('editable-bg-transition');  \r\n                    }, 1700);\r\n                }, 10);\r\n            }\r\n            \r\n            //set new value\r\n            this.setValue(params.newValue, false, params.response);\r\n            \r\n            /**        \r\n            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance\r\n            \r\n            @event save \r\n            @param {Object} event event object\r\n            @param {Object} params additional params\r\n            @param {mixed} params.newValue submitted value\r\n            @param {Object} params.response ajax response\r\n            @example\r\n            $('#username').on('save', function(e, params) {\r\n                alert('Saved value: ' + params.newValue);\r\n            });\r\n            **/\r\n            //event itself is triggered by editableContainer. Description here is only for documentation              \r\n        },\r\n\r\n        validate: function () {\r\n            if (typeof this.options.validate === 'function') {\r\n                return this.options.validate.call(this, this.value);\r\n            }\r\n        },\r\n        \r\n        /**\r\n        Sets new value of editable\r\n        @method setValue(value, convertStr)\r\n        @param {mixed} value new value \r\n        @param {boolean} convertStr whether to convert value from string to internal format\r\n        **/         \r\n        setValue: function(value, convertStr, response) {\r\n            if(convertStr) {\r\n                this.value = this.input.str2value(value);\r\n            } else {\r\n                this.value = value;\r\n            }\r\n            if(this.container) {\r\n                this.container.option('value', this.value);\r\n            }\r\n            $.when(this.render(response))\r\n            .then($.proxy(function() {\r\n                this.handleEmpty();\r\n            }, this));\r\n        },\r\n        \r\n        /**\r\n        Activates input of visible container (e.g. set focus)\r\n        @method activate()\r\n        **/         \r\n        activate: function() {\r\n            if(this.container) {\r\n               this.container.activate(); \r\n            }\r\n        },\r\n        \r\n        /**\r\n        Removes editable feature from element\r\n        @method destroy()\r\n        **/        \r\n        destroy: function() {\r\n            this.disable();\r\n            \r\n            if(this.container) {\r\n               this.container.destroy(); \r\n            }\r\n            \r\n            this.input.destroy();\r\n\r\n            if(this.options.toggle !== 'manual') {\r\n                this.$element.removeClass('editable-click');\r\n                this.$element.off(this.options.toggle + '.editable');\r\n            } \r\n            \r\n            this.$element.off(\"save.internal\");\r\n            \r\n            this.$element.removeClass('editable editable-open editable-disabled');\r\n            this.$element.removeData('editable');\r\n        }        \r\n    };\r\n\r\n    /* EDITABLE PLUGIN DEFINITION\r\n    * ======================= */\r\n\r\n    /**\r\n    jQuery method to initialize editable element.\r\n    \r\n    @method $().editable(options)\r\n    @params {Object} options\r\n    @example\r\n    $('#username').editable({\r\n        type: 'text',\r\n        url: '/post',\r\n        pk: 1\r\n    });\r\n    **/\r\n    $.fn.editable = function (option) {\r\n        //special API methods returning non-jquery object\r\n        var result = {}, args = arguments, datakey = 'editable';\r\n        switch (option) {\r\n            /**\r\n            Runs client-side validation for all matched editables\r\n            \r\n            @method validate()\r\n            @returns {Object} validation errors map\r\n            @example\r\n            $('#username, #fullname').editable('validate');\r\n            // possible result:\r\n            {\r\n              username: \"username is required\",\r\n              fullname: \"fullname should be minimum 3 letters length\"\r\n            }\r\n            **/\r\n            case 'validate':\r\n                this.each(function () {\r\n                    var $this = $(this), data = $this.data(datakey), error;\r\n                    if (data && (error = data.validate())) {\r\n                        result[data.options.name] = error;\r\n                    }\r\n                });\r\n            return result;\r\n\r\n            /**\r\n            Returns current values of editable elements.   \r\n            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    \r\n            If value of some editable is `null` or `undefined` it is excluded from result object.\r\n            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   \r\n             \r\n            @method getValue()\r\n            @param {bool} isSingle whether to return just value of single element\r\n            @returns {Object} object of element names and values\r\n            @example\r\n            $('#username, #fullname').editable('getValue');\r\n            //result:\r\n            {\r\n            username: \"superuser\",\r\n            fullname: \"John\"\r\n            }\r\n            //isSingle = true\r\n            $('#username').editable('getValue', true);\r\n            //result \"superuser\" \r\n            **/\r\n            case 'getValue':\r\n                if(arguments.length === 2 && arguments[1] === true) { //isSingle = true\r\n                    result = this.eq(0).data(datakey).value;\r\n                } else {\r\n                    this.each(function () {\r\n                        var $this = $(this), data = $this.data(datakey);\r\n                        if (data && data.value !== undefined && data.value !== null) {\r\n                            result[data.options.name] = data.input.value2submit(data.value);\r\n                        }\r\n                    });\r\n                }\r\n            return result;\r\n\r\n            /**\r\n            This method collects values from several editable elements and submit them all to server.   \r\n            Internally it runs client-side validation for all fields and submits only in case of success.  \r\n            See <a href=\"#newrecord\">creating new records</a> for details.  \r\n            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case\r\n            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. \r\n            \r\n            @method submit(options)\r\n            @param {object} options \r\n            @param {object} options.url url to submit data \r\n            @param {object} options.data additional data to submit\r\n            @param {object} options.ajaxOptions additional ajax options\r\n            @param {function} options.error(obj) error handler \r\n            @param {function} options.success(obj,config) success handler\r\n            @returns {Object} jQuery object\r\n            **/\r\n            case 'submit':  //collects value, validate and submit to server for creating new record\r\n                var config = arguments[1] || {},\r\n                $elems = this,\r\n                errors = this.editable('validate');\r\n\r\n                // validation ok\r\n                if($.isEmptyObject(errors)) {\r\n                    var ajaxOptions = {};\r\n                                                      \r\n                    // for single element use url, success etc from options\r\n                    if($elems.length === 1) {\r\n                        var editable = $elems.data('editable');\r\n                        //standard params\r\n                        var params = {\r\n                            name: editable.options.name || '',\r\n                            value: editable.input.value2submit(editable.value),\r\n                            pk: (typeof editable.options.pk === 'function') ? \r\n                                editable.options.pk.call(editable.options.scope) : \r\n                                editable.options.pk \r\n                        };\r\n\r\n                        //additional params\r\n                        if(typeof editable.options.params === 'function') {\r\n                            params = editable.options.params.call(editable.options.scope, params);  \r\n                        } else {\r\n                            //try parse json in single quotes (from data-params attribute)\r\n                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);   \r\n                            $.extend(params, editable.options.params);\r\n                        }\r\n\r\n                        ajaxOptions = {\r\n                            url: editable.options.url,\r\n                            data: params,\r\n                            type: 'POST'  \r\n                        };\r\n                        \r\n                        // use success / error from options \r\n                        config.success = config.success || editable.options.success;\r\n                        config.error = config.error || editable.options.error;\r\n                        \r\n                    // multiple elements\r\n                    } else {\r\n                        var values = this.editable('getValue'); \r\n                        \r\n                        ajaxOptions = {\r\n                            url: config.url,\r\n                            data: values, \r\n                            type: 'POST'\r\n                        };                        \r\n                    }                    \r\n\r\n                    // ajax success callabck (response 200 OK)\r\n                    ajaxOptions.success = typeof config.success === 'function' ? function(response) {\r\n                            config.success.call($elems, response, config);\r\n                        } : $.noop;\r\n                                  \r\n                    // ajax error callabck\r\n                    ajaxOptions.error = typeof config.error === 'function' ? function() {\r\n                             config.error.apply($elems, arguments);\r\n                        } : $.noop;\r\n                       \r\n                    // extend ajaxOptions    \r\n                    if(config.ajaxOptions) { \r\n                        $.extend(ajaxOptions, config.ajaxOptions);\r\n                    }\r\n                    \r\n                    // extra data \r\n                    if(config.data) {\r\n                        $.extend(ajaxOptions.data, config.data);\r\n                    }                     \r\n                    \r\n                    // perform ajax request\r\n                    $.ajax(ajaxOptions);\r\n                } else { //client-side validation error\r\n                    if(typeof config.error === 'function') {\r\n                        config.error.call($elems, errors);\r\n                    }\r\n                }\r\n            return this;\r\n        }\r\n\r\n        //return jquery object\r\n        return this.each(function () {\r\n            var $this = $(this), \r\n                data = $this.data(datakey), \r\n                options = typeof option === 'object' && option;\r\n\r\n            //for delegated targets do not store `editable` object for element\r\n            //it's allows several different selectors.\r\n            //see: https://github.com/vitalets/x-editable/issues/312    \r\n            if(options && options.selector) {\r\n                data = new Editable(this, options);\r\n                return; \r\n            }    \r\n            \r\n            if (!data) {\r\n                $this.data(datakey, (data = new Editable(this, options)));\r\n            }\r\n\r\n            if (typeof option === 'string') { //call method \r\n                data[option].apply(data, Array.prototype.slice.call(args, 1));\r\n            } \r\n        });\r\n    };    \r\n            \r\n\r\n    $.fn.editable.defaults = {\r\n        /**\r\n        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more\r\n\r\n        @property type \r\n        @type string\r\n        @default 'text'\r\n        **/\r\n        type: 'text',        \r\n        /**\r\n        Sets disabled state of editable\r\n\r\n        @property disabled \r\n        @type boolean\r\n        @default false\r\n        **/         \r\n        disabled: false,\r\n        /**\r\n        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.   \r\n        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.    \r\n        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element, \r\n        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.\r\n        \r\n        @example\r\n        $('#edit-button').click(function(e) {\r\n            e.stopPropagation();\r\n            $('#username').editable('toggle');\r\n        });\r\n\r\n        @property toggle \r\n        @type string\r\n        @default 'click'\r\n        **/          \r\n        toggle: 'click',\r\n        /**\r\n        Text shown when element is empty.\r\n\r\n        @property emptytext \r\n        @type string\r\n        @default 'Empty'\r\n        **/         \r\n        emptytext: 'Empty',\r\n        /**\r\n        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.\r\n        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  \r\n        <code>auto</code> - text will be automatically set only if element is empty.  \r\n        <code>always|never</code> - always(never) try to set element's text.\r\n\r\n        @property autotext \r\n        @type string\r\n        @default 'auto'\r\n        **/          \r\n        autotext: 'auto', \r\n        /**\r\n        Initial value of input. If not set, taken from element's text.  \r\n        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  \r\n        For example, to display currency sign:\r\n        @example\r\n        <a id=\"price\" data-type=\"text\" data-value=\"100\"></a>\r\n        <script>\r\n        $('#price').editable({\r\n            ...\r\n            display: function(value) {\r\n              $(this).text(value + '$');\r\n            } \r\n        }) \r\n        </script>\r\n                \r\n        @property value \r\n        @type mixed\r\n        @default element's text\r\n        **/\r\n        value: null,\r\n        /**\r\n        Callback to perform custom displaying of value in element's text.  \r\n        If `null`, default input's display used.  \r\n        If `false`, no displaying methods will be called, element's text will never change.  \r\n        Runs under element's scope.  \r\n        _**Parameters:**_  \r\n        \r\n        * `value` current value to be displayed\r\n        * `response` server response (if display called after ajax submit), since 1.4.0\r\n         \r\n        For _inputs with source_ (select, checklist) parameters are different:  \r\n          \r\n        * `value` current value to be displayed\r\n        * `sourceData` array of items for current input (e.g. dropdown items) \r\n        * `response` server response (if display called after ajax submit), since 1.4.0\r\n                  \r\n        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.\r\n        \r\n        @property display \r\n        @type function|boolean\r\n        @default null\r\n        @since 1.2.0\r\n        @example\r\n        display: function(value, sourceData) {\r\n           //display checklist as comma-separated values\r\n           var html = [],\r\n               checked = $.fn.editableutils.itemsByValue(value, sourceData);\r\n               \r\n           if(checked.length) {\r\n               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });\r\n               $(this).html(html.join(', '));\r\n           } else {\r\n               $(this).empty(); \r\n           }\r\n        }\r\n        **/          \r\n        display: null,\r\n        /**\r\n        Css class applied when editable text is empty.\r\n\r\n        @property emptyclass \r\n        @type string\r\n        @since 1.4.1        \r\n        @default editable-empty\r\n        **/        \r\n        emptyclass: 'editable-empty',\r\n        /**\r\n        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).  \r\n        You may set it to `null` if you work with editables locally and submit them together.  \r\n\r\n        @property unsavedclass \r\n        @type string\r\n        @since 1.4.1        \r\n        @default editable-unsaved\r\n        **/        \r\n        unsavedclass: 'editable-unsaved',\r\n        /**\r\n        If selector is provided, editable will be delegated to the specified targets.  \r\n        Usefull for dynamically generated DOM elements.  \r\n        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options, \r\n        as they actually become editable only after first click.  \r\n        You should manually set class `editable-click` to these elements.  \r\n        Also, if element originally empty you should add class `editable-empty`, set `data-value=\"\"` and write emptytext into element:\r\n\r\n        @property selector \r\n        @type string\r\n        @since 1.4.1        \r\n        @default null\r\n        @example\r\n        <div id=\"user\">\r\n          <!-- empty -->\r\n          <a href=\"#\" data-name=\"username\" data-type=\"text\" class=\"editable-click editable-empty\" data-value=\"\" title=\"Username\">Empty</a>\r\n          <!-- non-empty -->\r\n          <a href=\"#\" data-name=\"group\" data-type=\"select\" data-source=\"/groups\" data-value=\"1\" class=\"editable-click\" title=\"Group\">Operator</a>\r\n        </div>     \r\n        \r\n        <script>\r\n        $('#user').editable({\r\n            selector: 'a',\r\n            url: '/post',\r\n            pk: 1\r\n        });\r\n        </script>\r\n        **/         \r\n        selector: null,\r\n        /**\r\n        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.\r\n        \r\n        @property highlight \r\n        @type string|boolean\r\n        @since 1.4.5        \r\n        @default #FFFF80 \r\n        **/\r\n        highlight: '#FFFF80'\r\n    };\r\n    \r\n}(window.jQuery));\r\n\r\n/**\r\nAbstractInput - base class for all editable inputs.\r\nIt defines interface to be implemented by any input type.\r\nTo create your own input you can inherit from this class.\r\n\r\n@class abstractinput\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    //types\r\n    $.fn.editabletypes = {};\r\n\r\n    var AbstractInput = function () { };\r\n\r\n    AbstractInput.prototype = {\r\n       /**\r\n        Initializes input\r\n\r\n        @method init() \r\n        **/\r\n       init: function(type, options, defaults) {\r\n           this.type = type;\r\n           this.options = $.extend({}, defaults, options);\r\n       },\r\n\r\n       /*\r\n       this method called before render to init $tpl that is inserted in DOM\r\n       */\r\n       prerender: function() {\r\n           this.$tpl = $(this.options.tpl); //whole tpl as jquery object    \r\n           this.$input = this.$tpl;         //control itself, can be changed in render method\r\n           this.$clear = null;              //clear button\r\n           this.error = null;               //error message, if input cannot be rendered           \r\n       },\r\n       \r\n       /**\r\n        Renders input from tpl. Can return jQuery deferred object.\r\n        Can be overwritten in child objects\r\n\r\n        @method render()\r\n       **/\r\n       render: function() {\r\n\r\n       }, \r\n\r\n       /**\r\n        Sets element's html by value. \r\n\r\n        @method value2html(value, element)\r\n        @param {mixed} value\r\n        @param {DOMElement} element\r\n       **/\r\n       value2html: function(value, element) {\r\n           $(element)[this.options.escape ? 'text' : 'html']($.trim(value));\r\n       },\r\n\r\n       /**\r\n        Converts element's html to value\r\n\r\n        @method html2value(html)\r\n        @param {string} html\r\n        @returns {mixed}\r\n       **/\r\n       html2value: function(html) {\r\n           return $('<div>').html(html).text();\r\n       },\r\n\r\n       /**\r\n        Converts value to string (for internal compare). For submitting to server used value2submit().\r\n\r\n        @method value2str(value) \r\n        @param {mixed} value\r\n        @returns {string}\r\n       **/\r\n       value2str: function(value) {\r\n           return value;\r\n       }, \r\n\r\n       /**\r\n        Converts string received from server into value. Usually from `data-value` attribute.\r\n\r\n        @method str2value(str)\r\n        @param {string} str\r\n        @returns {mixed}\r\n       **/\r\n       str2value: function(str) {\r\n           return str;\r\n       }, \r\n       \r\n       /**\r\n        Converts value for submitting to server. Result can be string or object.\r\n\r\n        @method value2submit(value) \r\n        @param {mixed} value\r\n        @returns {mixed}\r\n       **/\r\n       value2submit: function(value) {\r\n           return value;\r\n       },\r\n\r\n       /**\r\n        Sets value of input.\r\n\r\n        @method value2input(value) \r\n        @param {mixed} value\r\n       **/\r\n       value2input: function(value) {\r\n           this.$input.val(value);\r\n       },\r\n\r\n       /**\r\n        Returns value of input. Value can be object (e.g. datepicker)\r\n\r\n        @method input2value() \r\n       **/\r\n       input2value: function() { \r\n           return this.$input.val();\r\n       }, \r\n\r\n       /**\r\n        Activates input. For text it sets focus.\r\n\r\n        @method activate() \r\n       **/\r\n       activate: function() {\r\n           if(this.$input.is(':visible')) {\r\n               this.$input.focus();\r\n           }\r\n       },\r\n\r\n       /**\r\n        Creates input.\r\n\r\n        @method clear() \r\n       **/        \r\n       clear: function() {\r\n           this.$input.val(null);\r\n       },\r\n\r\n       /**\r\n        method to escape html.\r\n       **/\r\n       escape: function(str) {\r\n           return $('<div>').text(str).html();\r\n       },\r\n       \r\n       /**\r\n        attach handler to automatically submit form when value changed (useful when buttons not shown)\r\n       **/\r\n       autosubmit: function() {\r\n        \r\n       },\r\n       \r\n       /**\r\n       Additional actions when destroying element \r\n       **/\r\n       destroy: function() {\r\n       },\r\n\r\n       // -------- helper functions --------\r\n       setClass: function() {          \r\n           if(this.options.inputclass) {\r\n               this.$input.addClass(this.options.inputclass); \r\n           } \r\n       },\r\n\r\n       setAttr: function(attr) {\r\n           if (this.options[attr] !== undefined && this.options[attr] !== null) {\r\n               this.$input.attr(attr, this.options[attr]);\r\n           } \r\n       },\r\n       \r\n       option: function(key, value) {\r\n            this.options[key] = value;\r\n       }\r\n       \r\n    };\r\n        \r\n    AbstractInput.defaults = {  \r\n        /**\r\n        HTML template of input. Normally you should not change it.\r\n\r\n        @property tpl \r\n        @type string\r\n        @default ''\r\n        **/   \r\n        tpl: '',\r\n        /**\r\n        CSS class automatically applied to input\r\n        \r\n        @property inputclass \r\n        @type string\r\n        @default null\r\n        **/         \r\n        inputclass: null,\r\n        \r\n        /**\r\n        If `true` - html will be escaped in content of element via $.text() method.  \r\n        If `false` - html will not be escaped, $.html() used.  \r\n        When you use own `display` function, this option obviosly has no effect.\r\n        \r\n        @property escape \r\n        @type boolean\r\n        @since 1.5.0\r\n        @default true\r\n        **/         \r\n        escape: true,\r\n                \r\n        //scope for external methods (e.g. source defined as function)\r\n        //for internal use only\r\n        scope: null,\r\n        \r\n        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)\r\n        showbuttons: true \r\n    };\r\n    \r\n    $.extend($.fn.editabletypes, {abstractinput: AbstractInput});\r\n        \r\n}(window.jQuery));\r\n\r\n/**\r\nList - abstract class for inputs that have source option loaded from js array or via ajax\r\n\r\n@class list\r\n@extends abstractinput\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var List = function (options) {\r\n       \r\n    };\r\n\r\n    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);\r\n\r\n    $.extend(List.prototype, {\r\n        render: function () {\r\n            var deferred = $.Deferred();\r\n\r\n            this.error = null;\r\n            this.onSourceReady(function () {\r\n                this.renderList();\r\n                deferred.resolve();\r\n            }, function () {\r\n                this.error = this.options.sourceError;\r\n                deferred.resolve();\r\n            });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        html2value: function (html) {\r\n            return null; //can't set value by text\r\n        },\r\n        \r\n        value2html: function (value, element, display, response) {\r\n            var deferred = $.Deferred(),\r\n                success = function () {\r\n                    if(typeof display === 'function') {\r\n                        //custom display method\r\n                        display.call(element, value, this.sourceData, response); \r\n                    } else {\r\n                        this.value2htmlFinal(value, element);\r\n                    }\r\n                    deferred.resolve();\r\n               };\r\n            \r\n            //for null value just call success without loading source\r\n            if(value === null) {\r\n               success.call(this);   \r\n            } else {\r\n               this.onSourceReady(success, function () { deferred.resolve(); });\r\n            }\r\n\r\n            return deferred.promise();\r\n        },  \r\n\r\n        // ------------- additional functions ------------\r\n\r\n        onSourceReady: function (success, error) {\r\n            //run source if it function\r\n            var source;\r\n            if ($.isFunction(this.options.source)) {\r\n                source = this.options.source.call(this.options.scope);\r\n                this.sourceData = null;\r\n                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed\r\n            } else {\r\n                source = this.options.source;\r\n            }            \r\n            \r\n            //if allready loaded just call success\r\n            if(this.options.sourceCache && $.isArray(this.sourceData)) {\r\n                success.call(this);\r\n                return; \r\n            }\r\n\r\n            //try parse json in single quotes (for double quotes jquery does automatically)\r\n            try {\r\n                source = $.fn.editableutils.tryParseJson(source, false);\r\n            } catch (e) {\r\n                error.call(this);\r\n                return;\r\n            }\r\n\r\n            //loading from url\r\n            if (typeof source === 'string') {\r\n                //try to get sourceData from cache\r\n                if(this.options.sourceCache) {\r\n                    var cacheID = source,\r\n                    cache;\r\n\r\n                    if (!$(document).data(cacheID)) {\r\n                        $(document).data(cacheID, {});\r\n                    }\r\n                    cache = $(document).data(cacheID);\r\n\r\n                    //check for cached data\r\n                    if (cache.loading === false && cache.sourceData) { //take source from cache\r\n                        this.sourceData = cache.sourceData;\r\n                        this.doPrepend();\r\n                        success.call(this);\r\n                        return;\r\n                    } else if (cache.loading === true) { //cache is loading, put callback in stack to be called later\r\n                        cache.callbacks.push($.proxy(function () {\r\n                            this.sourceData = cache.sourceData;\r\n                            this.doPrepend();\r\n                            success.call(this);\r\n                        }, this));\r\n\r\n                        //also collecting error callbacks\r\n                        cache.err_callbacks.push($.proxy(error, this));\r\n                        return;\r\n                    } else { //no cache yet, activate it\r\n                        cache.loading = true;\r\n                        cache.callbacks = [];\r\n                        cache.err_callbacks = [];\r\n                    }\r\n                }\r\n                \r\n                //ajaxOptions for source. Can be overwritten bt options.sourceOptions\r\n                var ajaxOptions = $.extend({\r\n                    url: source,\r\n                    type: 'get',\r\n                    cache: false,\r\n                    dataType: 'json',\r\n                    success: $.proxy(function (data) {\r\n                        if(cache) {\r\n                            cache.loading = false;\r\n                        }\r\n                        this.sourceData = this.makeArray(data);\r\n                        if($.isArray(this.sourceData)) {\r\n                            if(cache) {\r\n                                //store result in cache\r\n                                cache.sourceData = this.sourceData;\r\n                                //run success callbacks for other fields waiting for this source\r\n                                $.each(cache.callbacks, function () { this.call(); }); \r\n                            }\r\n                            this.doPrepend();\r\n                            success.call(this);\r\n                        } else {\r\n                            error.call(this);\r\n                            if(cache) {\r\n                                //run error callbacks for other fields waiting for this source\r\n                                $.each(cache.err_callbacks, function () { this.call(); }); \r\n                            }\r\n                        }\r\n                    }, this),\r\n                    error: $.proxy(function () {\r\n                        error.call(this);\r\n                        if(cache) {\r\n                             cache.loading = false;\r\n                             //run error callbacks for other fields\r\n                             $.each(cache.err_callbacks, function () { this.call(); }); \r\n                        }\r\n                    }, this)\r\n                }, this.options.sourceOptions);\r\n                \r\n                //loading sourceData from server\r\n                $.ajax(ajaxOptions);\r\n                \r\n            } else { //options as json/array\r\n                this.sourceData = this.makeArray(source);\r\n                    \r\n                if($.isArray(this.sourceData)) {\r\n                    this.doPrepend();\r\n                    success.call(this);   \r\n                } else {\r\n                    error.call(this);\r\n                }\r\n            }\r\n        },\r\n\r\n        doPrepend: function () {\r\n            if(this.options.prepend === null || this.options.prepend === undefined) {\r\n                return;  \r\n            }\r\n            \r\n            if(!$.isArray(this.prependData)) {\r\n                //run prepend if it is function (once)\r\n                if ($.isFunction(this.options.prepend)) {\r\n                    this.options.prepend = this.options.prepend.call(this.options.scope);\r\n                }\r\n              \r\n                //try parse json in single quotes\r\n                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);\r\n                \r\n                //convert prepend from string to object\r\n                if (typeof this.options.prepend === 'string') {\r\n                    this.options.prepend = {'': this.options.prepend};\r\n                }\r\n                \r\n                this.prependData = this.makeArray(this.options.prepend);\r\n            }\r\n\r\n            if($.isArray(this.prependData) && $.isArray(this.sourceData)) {\r\n                this.sourceData = this.prependData.concat(this.sourceData);\r\n            }\r\n        },\r\n\r\n        /*\r\n         renders input list\r\n        */\r\n        renderList: function() {\r\n            // this method should be overwritten in child class\r\n        },\r\n       \r\n         /*\r\n         set element's html by value\r\n        */\r\n        value2htmlFinal: function(value, element) {\r\n            // this method should be overwritten in child class\r\n        },        \r\n\r\n        /**\r\n        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]\r\n        */\r\n        makeArray: function(data) {\r\n            var count, obj, result = [], item, iterateItem;\r\n            if(!data || typeof data === 'string') {\r\n                return null; \r\n            }\r\n\r\n            if($.isArray(data)) { //array\r\n                /* \r\n                   function to iterate inside item of array if item is object.\r\n                   Caclulates count of keys in item and store in obj. \r\n                */\r\n                iterateItem = function (k, v) {\r\n                    obj = {value: k, text: v};\r\n                    if(count++ >= 2) {\r\n                        return false;// exit from `each` if item has more than one key.\r\n                    }\r\n                };\r\n            \r\n                for(var i = 0; i < data.length; i++) {\r\n                    item = data[i]; \r\n                    if(typeof item === 'object') {\r\n                        count = 0; //count of keys inside item\r\n                        $.each(item, iterateItem);\r\n                        //case: [{val1: 'text1'}, {val2: 'text2} ...]\r\n                        if(count === 1) { \r\n                            result.push(obj); \r\n                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]\r\n                        } else if(count > 1) {\r\n                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')\r\n                            if(item.children) {\r\n                                item.children = this.makeArray(item.children);   \r\n                            }\r\n                            result.push(item);\r\n                        }\r\n                    } else {\r\n                        //case: ['text1', 'text2' ...]\r\n                        result.push({value: item, text: item}); \r\n                    }\r\n                }\r\n            } else {  //case: {val1: 'text1', val2: 'text2, ...}\r\n                $.each(data, function (k, v) {\r\n                    result.push({value: k, text: v});\r\n                });  \r\n            }\r\n            return result;\r\n        },\r\n        \r\n        option: function(key, value) {\r\n            this.options[key] = value;\r\n            if(key === 'source') {\r\n                this.sourceData = null;\r\n            }\r\n            if(key === 'prepend') {\r\n                this.prependData = null;\r\n            }            \r\n        }        \r\n\r\n    });      \r\n\r\n    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        Source data for list.  \r\n        If **array** - it should be in format: `[{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}, ...]`  \r\n        For compability, object format is also supported: `{\"1\": \"text1\", \"2\": \"text2\" ...}` but it does not guarantee elements order.\r\n        \r\n        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.\r\n          \r\n        If **function**, it should return data in format above (since 1.4.0).\r\n        \r\n        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).  \r\n        `[{text: \"group1\", children: [{value: 1, text: \"text1\"}, {value: 2, text: \"text2\"}]}, ...]` \r\n\r\n\t\t\r\n        @property source \r\n        @type string | array | object | function\r\n        @default null\r\n        **/         \r\n        source: null, \r\n        /**\r\n        Data automatically prepended to the beginning of dropdown list.\r\n        \r\n        @property prepend \r\n        @type string | array | object | function\r\n        @default false\r\n        **/         \r\n        prepend: false,\r\n        /**\r\n        Error message when list cannot be loaded (e.g. ajax error)\r\n        \r\n        @property sourceError \r\n        @type string\r\n        @default Error when loading list\r\n        **/          \r\n        sourceError: 'Error when loading list',\r\n        /**\r\n        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    \r\n        Usefull for editable column in grid to prevent extra requests.\r\n        \r\n        @property sourceCache \r\n        @type boolean\r\n        @default true\r\n        @since 1.2.0\r\n        **/        \r\n        sourceCache: true,\r\n        /**\r\n        Additional ajax options to be used in $.ajax() when loading list from server.\r\n        Useful to send extra parameters (`data` key) or change request method (`type` key).\r\n        \r\n        @property sourceOptions \r\n        @type object|function\r\n        @default null\r\n        @since 1.5.0\r\n        **/        \r\n        sourceOptions: null\r\n    });\r\n\r\n    $.fn.editabletypes.list = List;      \r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nText input\r\n\r\n@class text\r\n@extends abstractinput\r\n@final\r\n@example\r\n<a href=\"#\" id=\"username\" data-type=\"text\" data-pk=\"1\">awesome</a>\r\n<script>\r\n$(function(){\r\n    $('#username').editable({\r\n        url: '/post',\r\n        title: 'Enter username'\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Text = function (options) {\r\n        this.init('text', options, Text.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);\r\n\r\n    $.extend(Text.prototype, {\r\n        render: function() {\r\n           this.renderClear();\r\n           this.setClass();\r\n           this.setAttr('placeholder');\r\n        },\r\n        \r\n        activate: function() {\r\n            if(this.$input.is(':visible')) {\r\n                this.$input.focus();\r\n                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);\r\n                if(this.toggleClear) {\r\n                    this.toggleClear();\r\n                }\r\n            }\r\n        },\r\n        \r\n        //render clear button\r\n        renderClear:  function() {\r\n           if (this.options.clear) {\r\n               this.$clear = $('<span class=\"editable-clear-x\"></span>');\r\n               this.$input.after(this.$clear)\r\n                          .css('padding-right', 24)\r\n                          .keyup($.proxy(function(e) {\r\n                              //arrows, enter, tab, etc\r\n                              if(~$.inArray(e.keyCode, [40,38,9,13,27])) {\r\n                                return;\r\n                              }                            \r\n\r\n                              clearTimeout(this.t);\r\n                              var that = this;\r\n                              this.t = setTimeout(function() {\r\n                                that.toggleClear(e);\r\n                              }, 100);\r\n                              \r\n                          }, this))\r\n                          .parent().css('position', 'relative');\r\n                          \r\n               this.$clear.click($.proxy(this.clear, this));                       \r\n           }            \r\n        },\r\n        \r\n        postrender: function() {\r\n            /*\r\n            //now `clear` is positioned via css\r\n            if(this.$clear) {\r\n                //can position clear button only here, when form is shown and height can be calculated\r\n//                var h = this.$input.outerHeight(true) || 20,\r\n                var h = this.$clear.parent().height(),\r\n                    delta = (h - this.$clear.height()) / 2;\r\n                    \r\n                //this.$clear.css({bottom: delta, right: delta});\r\n            }\r\n            */ \r\n        },\r\n        \r\n        //show / hide clear button\r\n        toggleClear: function(e) {\r\n            if(!this.$clear) {\r\n                return;\r\n            }\r\n            \r\n            var len = this.$input.val().length,\r\n                visible = this.$clear.is(':visible');\r\n                 \r\n            if(len && !visible) {\r\n                this.$clear.show();\r\n            } \r\n            \r\n            if(!len && visible) {\r\n                this.$clear.hide();\r\n            } \r\n        },\r\n        \r\n        clear: function() {\r\n           this.$clear.hide();\r\n           this.$input.val('').focus();\r\n        }          \r\n    });\r\n\r\n    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <input type=\"text\">\r\n        **/         \r\n        tpl: '<input type=\"text\">',\r\n        /**\r\n        Placeholder attribute of input. Shown when input is empty.\r\n\r\n        @property placeholder \r\n        @type string\r\n        @default null\r\n        **/             \r\n        placeholder: null,\r\n        \r\n        /**\r\n        Whether to show `clear` button \r\n        \r\n        @property clear \r\n        @type boolean\r\n        @default true        \r\n        **/\r\n        clear: true\r\n    });\r\n\r\n    $.fn.editabletypes.text = Text;\r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nTextarea input\r\n\r\n@class textarea\r\n@extends abstractinput\r\n@final\r\n@example\r\n<a href=\"#\" id=\"comments\" data-type=\"textarea\" data-pk=\"1\">awesome comment!</a>\r\n<script>\r\n$(function(){\r\n    $('#comments').editable({\r\n        url: '/post',\r\n        title: 'Enter comments',\r\n        rows: 10\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Textarea = function (options) {\r\n        this.init('textarea', options, Textarea.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);\r\n\r\n    $.extend(Textarea.prototype, {\r\n        render: function () {\r\n            this.setClass();\r\n            this.setAttr('placeholder');\r\n            this.setAttr('rows');                        \r\n            \r\n            //ctrl + enter\r\n            this.$input.keydown(function (e) {\r\n                if (e.ctrlKey && e.which === 13) {\r\n                    $(this).closest('form').submit();\r\n                }\r\n            });\r\n        },\r\n        \r\n       //using `white-space: pre-wrap` solves \\n  <--> BR conversion very elegant!\r\n       /* \r\n       value2html: function(value, element) {\r\n            var html = '', lines;\r\n            if(value) {\r\n                lines = value.split(\"\\n\");\r\n                for (var i = 0; i < lines.length; i++) {\r\n                    lines[i] = $('<div>').text(lines[i]).html();\r\n                }\r\n                html = lines.join('<br>');\r\n            }\r\n            $(element).html(html);\r\n        },\r\n       \r\n        html2value: function(html) {\r\n            if(!html) {\r\n                return '';\r\n            }\r\n\r\n            var regex = new RegExp(String.fromCharCode(10), 'g');\r\n            var lines = html.split(/<br\\s*\\/?>/i);\r\n            for (var i = 0; i < lines.length; i++) {\r\n                var text = $('<div>').html(lines[i]).text();\r\n\r\n                // Remove newline characters (\\n) to avoid them being converted by value2html() method\r\n                // thus adding extra <br> tags\r\n                text = text.replace(regex, '');\r\n\r\n                lines[i] = text;\r\n            }\r\n            return lines.join(\"\\n\");\r\n        },\r\n         */\r\n        activate: function() {\r\n            $.fn.editabletypes.text.prototype.activate.call(this);\r\n        }\r\n    });\r\n\r\n    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl\r\n        @default <textarea></textarea>\r\n        **/\r\n        tpl:'<textarea></textarea>',\r\n        /**\r\n        @property inputclass\r\n        @default input-large\r\n        **/\r\n        inputclass: 'input-large',\r\n        /**\r\n        Placeholder attribute of input. Shown when input is empty.\r\n\r\n        @property placeholder\r\n        @type string\r\n        @default null\r\n        **/\r\n        placeholder: null,\r\n        /**\r\n        Number of rows in textarea\r\n\r\n        @property rows\r\n        @type integer\r\n        @default 7\r\n        **/        \r\n        rows: 7        \r\n    });\r\n\r\n    $.fn.editabletypes.textarea = Textarea;\r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nSelect (dropdown)\r\n\r\n@class select\r\n@extends list\r\n@final\r\n@example\r\n<a href=\"#\" id=\"status\" data-type=\"select\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select status\"></a>\r\n<script>\r\n$(function(){\r\n    $('#status').editable({\r\n        value: 2,    \r\n        source: [\r\n              {value: 1, text: 'Active'},\r\n              {value: 2, text: 'Blocked'},\r\n              {value: 3, text: 'Deleted'}\r\n           ]\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Select = function (options) {\r\n        this.init('select', options, Select.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);\r\n\r\n    $.extend(Select.prototype, {\r\n        renderList: function() {\r\n            this.$input.empty();\r\n\r\n            var fillItems = function($el, data) {\r\n                var attr;\r\n                if($.isArray(data)) {\r\n                    for(var i=0; i<data.length; i++) {\r\n                        attr = {};\r\n                        if(data[i].children) {\r\n                            attr.label = data[i].text;\r\n                            $el.append(fillItems($('<optgroup>', attr), data[i].children)); \r\n                        } else {\r\n                            attr.value = data[i].value;\r\n                            if(data[i].disabled) {\r\n                                attr.disabled = true;\r\n                            }\r\n                            $el.append($('<option>', attr).text(data[i].text)); \r\n                        }\r\n                    }\r\n                }\r\n                return $el;\r\n            };        \r\n\r\n            fillItems(this.$input, this.sourceData);\r\n            \r\n            this.setClass();\r\n            \r\n            //enter submit\r\n            this.$input.on('keydown.editable', function (e) {\r\n                if (e.which === 13) {\r\n                    $(this).closest('form').submit();\r\n                }\r\n            });            \r\n        },\r\n       \r\n        value2htmlFinal: function(value, element) {\r\n            var text = '', \r\n                items = $.fn.editableutils.itemsByValue(value, this.sourceData);\r\n                \r\n            if(items.length) {\r\n                text = items[0].text;\r\n            }\r\n            \r\n            //$(element).text(text);\r\n            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);\r\n        },\r\n        \r\n        autosubmit: function() {\r\n            this.$input.off('keydown.editable').on('change.editable', function(){\r\n                $(this).closest('form').submit();\r\n            });\r\n        }\r\n    });      \r\n\r\n    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <select></select>\r\n        **/         \r\n        tpl:'<select></select>'\r\n    });\r\n\r\n    $.fn.editabletypes.select = Select;      \r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nList of checkboxes. \r\nInternally value stored as javascript array of values.\r\n\r\n@class checklist\r\n@extends list\r\n@final\r\n@example\r\n<a href=\"#\" id=\"options\" data-type=\"checklist\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select options\"></a>\r\n<script>\r\n$(function(){\r\n    $('#options').editable({\r\n        value: [2, 3],    \r\n        source: [\r\n              {value: 1, text: 'option1'},\r\n              {value: 2, text: 'option2'},\r\n              {value: 3, text: 'option3'}\r\n           ]\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Checklist = function (options) {\r\n        this.init('checklist', options, Checklist.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);\r\n\r\n    $.extend(Checklist.prototype, {\r\n        renderList: function() {\r\n            var $label, $div;\r\n            \r\n            this.$tpl.empty();\r\n            \r\n            if(!$.isArray(this.sourceData)) {\r\n                return;\r\n            }\r\n\r\n            for(var i=0; i<this.sourceData.length; i++) {\r\n                $label = $('<label>').append($('<input>', {\r\n                                           type: 'checkbox',\r\n                                           value: this.sourceData[i].value \r\n                                     }))\r\n                                     .append($('<span>').text(' '+this.sourceData[i].text));\r\n                \r\n                $('<div>').append($label).appendTo(this.$tpl);\r\n            }\r\n            \r\n            this.$input = this.$tpl.find('input[type=\"checkbox\"]');\r\n            this.setClass();\r\n        },\r\n       \r\n       value2str: function(value) {\r\n           return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';\r\n       },  \r\n       \r\n       //parse separated string\r\n        str2value: function(str) {\r\n           var reg, value = null;\r\n           if(typeof str === 'string' && str.length) {\r\n               reg = new RegExp('\\\\s*'+$.trim(this.options.separator)+'\\\\s*');\r\n               value = str.split(reg);\r\n           } else if($.isArray(str)) {\r\n               value = str; \r\n           } else {\r\n               value = [str];\r\n           }\r\n           return value;\r\n        },       \r\n       \r\n       //set checked on required checkboxes\r\n       value2input: function(value) {\r\n            this.$input.prop('checked', false);\r\n            if($.isArray(value) && value.length) {\r\n               this.$input.each(function(i, el) {\r\n                   var $el = $(el);\r\n                   // cannot use $.inArray as it performs strict comparison\r\n                   $.each(value, function(j, val){\r\n                       /*jslint eqeq: true*/\r\n                       if($el.val() == val) {\r\n                       /*jslint eqeq: false*/                           \r\n                           $el.prop('checked', true);\r\n                       }\r\n                   });\r\n               }); \r\n            }  \r\n        },  \r\n        \r\n       input2value: function() { \r\n           var checked = [];\r\n           this.$input.filter(':checked').each(function(i, el) {\r\n               checked.push($(el).val());\r\n           });\r\n           return checked;\r\n       },            \r\n          \r\n       //collect text of checked boxes\r\n        value2htmlFinal: function(value, element) {\r\n           var html = [],\r\n               checked = $.fn.editableutils.itemsByValue(value, this.sourceData),\r\n               escape = this.options.escape;\r\n               \r\n           if(checked.length) {\r\n               $.each(checked, function(i, v) {\r\n                   var text = escape ? $.fn.editableutils.escape(v.text) : v.text; \r\n                   html.push(text); \r\n               });\r\n               $(element).html(html.join('<br>'));\r\n           } else {\r\n               $(element).empty(); \r\n           }\r\n        },\r\n        \r\n       activate: function() {\r\n           this.$input.first().focus();\r\n       },\r\n       \r\n       autosubmit: function() {\r\n           this.$input.on('keydown', function(e){\r\n               if (e.which === 13) {\r\n                   $(this).closest('form').submit();\r\n               }\r\n           });\r\n       }\r\n    });      \r\n\r\n    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <div></div>\r\n        **/         \r\n        tpl:'<div class=\"editable-checklist\"></div>',\r\n        \r\n        /**\r\n        @property inputclass \r\n        @type string\r\n        @default null\r\n        **/         \r\n        inputclass: null,        \r\n        \r\n        /**\r\n        Separator of values when reading from `data-value` attribute\r\n\r\n        @property separator \r\n        @type string\r\n        @default ','\r\n        **/         \r\n        separator: ','\r\n    });\r\n\r\n    $.fn.editabletypes.checklist = Checklist;      \r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nHTML5 input types.\r\nFollowing types are supported:\r\n\r\n* password\r\n* email\r\n* url\r\n* tel\r\n* number\r\n* range\r\n* time\r\n\r\nLearn more about html5 inputs:  \r\nhttp://www.w3.org/wiki/HTML5_form_additions  \r\nTo check browser compatibility please see:  \r\nhttps://developer.mozilla.org/en-US/docs/HTML/Element/Input\r\n            \r\n@class html5types \r\n@extends text\r\n@final\r\n@since 1.3.0\r\n@example\r\n<a href=\"#\" id=\"email\" data-type=\"email\" data-pk=\"1\">admin@example.com</a>\r\n<script>\r\n$(function(){\r\n    $('#email').editable({\r\n        url: '/post',\r\n        title: 'Enter email'\r\n    });\r\n});\r\n</script>\r\n**/\r\n\r\n/**\r\n@property tpl \r\n@default depends on type\r\n**/ \r\n\r\n/*\r\nPassword\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Password = function (options) {\r\n        this.init('password', options, Password.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);\r\n    $.extend(Password.prototype, {\r\n       //do not display password, show '[hidden]' instead\r\n       value2html: function(value, element) {\r\n           if(value) {\r\n               $(element).text('[hidden]');\r\n           } else {\r\n               $(element).empty(); \r\n           }\r\n       },\r\n       //as password not displayed, should not set value by html\r\n       html2value: function(html) {\r\n           return null;\r\n       }       \r\n    });    \r\n    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\r\n        tpl: '<input type=\"password\">'\r\n    });\r\n    $.fn.editabletypes.password = Password;\r\n}(window.jQuery));\r\n\r\n\r\n/*\r\nEmail\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Email = function (options) {\r\n        this.init('email', options, Email.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);\r\n    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\r\n        tpl: '<input type=\"email\">'\r\n    });\r\n    $.fn.editabletypes.email = Email;\r\n}(window.jQuery));\r\n\r\n\r\n/*\r\nUrl\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Url = function (options) {\r\n        this.init('url', options, Url.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);\r\n    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\r\n        tpl: '<input type=\"url\">'\r\n    });\r\n    $.fn.editabletypes.url = Url;\r\n}(window.jQuery));\r\n\r\n\r\n/*\r\nTel\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Tel = function (options) {\r\n        this.init('tel', options, Tel.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);\r\n    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\r\n        tpl: '<input type=\"tel\">'\r\n    });\r\n    $.fn.editabletypes.tel = Tel;\r\n}(window.jQuery));\r\n\r\n\r\n/*\r\nNumber\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var NumberInput = function (options) {\r\n        this.init('number', options, NumberInput.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);\r\n    $.extend(NumberInput.prototype, {\r\n         render: function () {\r\n            NumberInput.superclass.render.call(this);\r\n            this.setAttr('min');\r\n            this.setAttr('max');\r\n            this.setAttr('step');\r\n        },\r\n        postrender: function() {\r\n            if(this.$clear) {\r\n                //increase right ffset  for up/down arrows\r\n                this.$clear.css({right: 24});\r\n                /*\r\n                //can position clear button only here, when form is shown and height can be calculated\r\n                var h = this.$input.outerHeight(true) || 20,\r\n                    delta = (h - this.$clear.height()) / 2;\r\n                \r\n                //add 12px to offset right for up/down arrows    \r\n                this.$clear.css({top: delta, right: delta + 16});\r\n                */\r\n            } \r\n        }        \r\n    });     \r\n    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {\r\n        tpl: '<input type=\"number\">',\r\n        inputclass: 'input-mini',\r\n        min: null,\r\n        max: null,\r\n        step: null\r\n    });\r\n    $.fn.editabletypes.number = NumberInput;\r\n}(window.jQuery));\r\n\r\n\r\n/*\r\nRange (inherit from number)\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Range = function (options) {\r\n        this.init('range', options, Range.defaults);\r\n    };\r\n    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);\r\n    $.extend(Range.prototype, {\r\n        render: function () {\r\n            this.$input = this.$tpl.filter('input');\r\n            \r\n            this.setClass();\r\n            this.setAttr('min');\r\n            this.setAttr('max');\r\n            this.setAttr('step');           \r\n            \r\n            this.$input.on('input', function(){\r\n                $(this).siblings('output').text($(this).val()); \r\n            });  \r\n        },\r\n        activate: function() {\r\n            this.$input.focus();\r\n        }         \r\n    });\r\n    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {\r\n        tpl: '<input type=\"range\"><output style=\"width: 30px; display: inline-block\"></output>',\r\n        inputclass: 'input-medium'\r\n    });\r\n    $.fn.editabletypes.range = Range;\r\n}(window.jQuery));\r\n\r\n/*\r\nTime\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    var Time = function (options) {\r\n        this.init('time', options, Time.defaults);\r\n    };\r\n    //inherit from abstract, as inheritance from text gives selection error.\r\n    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);\r\n    $.extend(Time.prototype, {\r\n        render: function() {\r\n           this.setClass();\r\n        }        \r\n    });\r\n    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        tpl: '<input type=\"time\">'\r\n    });\r\n    $.fn.editabletypes.time = Time;\r\n}(window.jQuery));\r\n\r\n/**\r\nSelect2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.  \r\nPlease see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.  \r\n \r\nYou should manually download and include select2 distributive:  \r\n\r\n    <link href=\"select2/select2.css\" rel=\"stylesheet\" type=\"text/css\"></link>  \r\n    <script src=\"select2/select2.js\"></script>  \r\n    \r\nTo make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css): \r\n\r\n    <link href=\"select2-bootstrap.css\" rel=\"stylesheet\" type=\"text/css\"></link>    \r\n    \r\n**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.    \r\nYou need initially put both `data-value` and element's text youself:    \r\n\r\n    <a href=\"#\" data-type=\"select2\" data-value=\"1\">Text1</a>\r\n    \r\n    \r\n@class select2\r\n@extends abstractinput\r\n@since 1.4.1\r\n@final\r\n@example\r\n<a href=\"#\" id=\"country\" data-type=\"select2\" data-pk=\"1\" data-value=\"ru\" data-url=\"/post\" data-title=\"Select country\"></a>\r\n<script>\r\n$(function(){\r\n    //local source\r\n    $('#country').editable({\r\n        source: [\r\n              {id: 'gb', text: 'Great Britain'},\r\n              {id: 'us', text: 'United States'},\r\n              {id: 'ru', text: 'Russia'}\r\n           ],\r\n        select2: {\r\n           multiple: true\r\n        }\r\n    });\r\n    //remote source (simple)\r\n    $('#country').editable({\r\n        source: '/getCountries',\r\n        select2: {\r\n            placeholder: 'Select Country',\r\n            minimumInputLength: 1\r\n        }\r\n    });\r\n    //remote source (advanced)\r\n    $('#country').editable({\r\n        select2: {\r\n            placeholder: 'Select Country',\r\n            allowClear: true,\r\n            minimumInputLength: 3,\r\n            id: function (item) {\r\n                return item.CountryId;\r\n            },\r\n            ajax: {\r\n                url: '/getCountries',\r\n                dataType: 'json',\r\n                data: function (term, page) {\r\n                    return { query: term };\r\n                },\r\n                results: function (data, page) {\r\n                    return { results: data };\r\n                }\r\n            },\r\n            formatResult: function (item) {\r\n                return item.CountryName;\r\n            },\r\n            formatSelection: function (item) {\r\n                return item.CountryName;\r\n            },\r\n            initSelection: function (element, callback) {\r\n                return $.get('/getCountryById', { query: element.val() }, function (data) {\r\n                    callback(data);\r\n                });\r\n            } \r\n        }  \r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Constructor = function (options) {\r\n        this.init('select2', options, Constructor.defaults);\r\n\r\n        options.select2 = options.select2 || {};\r\n\r\n        this.sourceData = null;\r\n        \r\n        //placeholder\r\n        if(options.placeholder) {\r\n            options.select2.placeholder = options.placeholder;\r\n        }\r\n       \r\n        //if not `tags` mode, use source\r\n        if(!options.select2.tags && options.source) {\r\n            var source = options.source;\r\n            //if source is function, call it (once!)\r\n            if ($.isFunction(options.source)) {\r\n                source = options.source.call(options.scope);\r\n            }               \r\n\r\n            if (typeof source === 'string') {\r\n                options.select2.ajax = options.select2.ajax || {};\r\n                //some default ajax params\r\n                if(!options.select2.ajax.data) {\r\n                    options.select2.ajax.data = function(term) {return { query:term };};\r\n                }\r\n                if(!options.select2.ajax.results) {\r\n                    options.select2.ajax.results = function(data) { return {results:data };};\r\n                }\r\n                options.select2.ajax.url = source;\r\n            } else {\r\n                //check format and convert x-editable format to select2 format (if needed)\r\n                this.sourceData = this.convertSource(source);\r\n                options.select2.data = this.sourceData;\r\n            }\r\n        } \r\n\r\n        //overriding objects in config (as by default jQuery extend() is not recursive)\r\n        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);\r\n\r\n        //detect whether it is multi-valued\r\n        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;\r\n        this.isRemote = ('ajax' in this.options.select2);\r\n\r\n        //store function returning ID of item\r\n        //should be here as used inautotext for local source\r\n        this.idFunc = this.options.select2.id;\r\n        if (typeof(this.idFunc) !== \"function\") {\r\n            var idKey = this.idFunc || 'id';\r\n            this.idFunc = function (e) { return e[idKey]; };\r\n        }\r\n\r\n        //store function that renders text in select2\r\n        this.formatSelection = this.options.select2.formatSelection;\r\n        if (typeof(this.formatSelection) !== \"function\") {\r\n            this.formatSelection = function (e) { return e.text; };\r\n        }\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);\r\n\r\n    $.extend(Constructor.prototype, {\r\n        render: function() {\r\n            this.setClass();\r\n\r\n            //can not apply select2 here as it calls initSelection \r\n            //over input that does not have correct value yet.\r\n            //apply select2 only in value2input\r\n            //this.$input.select2(this.options.select2);\r\n\r\n            //when data is loaded via ajax, we need to know when it's done to populate listData\r\n            if(this.isRemote) {\r\n                //listen to loaded event to populate data\r\n                this.$input.on('select2-loaded', $.proxy(function(e) {\r\n                    this.sourceData = e.items.results;\r\n                }, this));\r\n            }\r\n\r\n            //trigger resize of editableform to re-position container in multi-valued mode\r\n            if(this.isMultiple) {\r\n               this.$input.on('change', function() {\r\n                   $(this).closest('form').parent().triggerHandler('resize');\r\n               });\r\n            }\r\n       },\r\n\r\n       value2html: function(value, element) {\r\n           var text = '', data,\r\n               that = this;\r\n\r\n           if(this.options.select2.tags) { //in tags mode just assign value\r\n              data = value; \r\n              //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);\r\n           } else if(this.sourceData) {\r\n              data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc); \r\n           } else {\r\n              //can not get list of possible values \r\n              //(e.g. autotext for select2 with ajax source)\r\n           }\r\n\r\n           //data may be array (when multiple values allowed)\r\n           if($.isArray(data)) {\r\n               //collect selected data and show with separator\r\n               text = [];\r\n               $.each(data, function(k, v){\r\n                   text.push(v && typeof v === 'object' ? that.formatSelection(v) : v);\r\n               });\r\n           } else if(data) {\r\n               text = that.formatSelection(data);\r\n           }\r\n\r\n           text = $.isArray(text) ? text.join(this.options.viewseparator) : text;\r\n\r\n           //$(element).text(text);\r\n           Constructor.superclass.value2html.call(this, text, element); \r\n       },\r\n\r\n       html2value: function(html) {\r\n           return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;\r\n       },\r\n\r\n       value2input: function(value) {\r\n           // if value array => join it anyway\r\n           if($.isArray(value)) {\r\n              value = value.join(this.getSeparator());\r\n           }\r\n\r\n           //for remote source just set value, text is updated by initSelection\r\n           if(!this.$input.data('select2')) {\r\n               this.$input.val(value);\r\n               this.$input.select2(this.options.select2);\r\n           } else {\r\n               //second argument needed to separate initial change from user's click (for autosubmit)   \r\n               this.$input.val(value).trigger('change', true); \r\n\r\n               //Uncaught Error: cannot call val() if initSelection() is not defined\r\n               //this.$input.select2('val', value);\r\n           }\r\n\r\n           // if defined remote source AND no multiple mode AND no user's initSelection provided --> \r\n           // we should somehow get text for provided id.\r\n           // The solution is to use element's text as text for that id (exclude empty)\r\n           if(this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {\r\n               // customId and customText are methods to extract `id` and `text` from data object\r\n               // we can use this workaround only if user did not define these methods\r\n               // otherwise we cant construct data object\r\n               var customId = this.options.select2.id,\r\n                   customText = this.options.select2.formatSelection;\r\n\r\n               if(!customId && !customText) {\r\n                   var $el = $(this.options.scope);\r\n                   if (!$el.data('editable').isEmpty) {\r\n                       var data = {id: value, text: $el.text()};\r\n                       this.$input.select2('data', data); \r\n                   }\r\n               }\r\n           }\r\n       },\r\n       \r\n       input2value: function() { \r\n           return this.$input.select2('val');\r\n       },\r\n\r\n       str2value: function(str, separator) {\r\n            if(typeof str !== 'string' || !this.isMultiple) {\r\n                return str;\r\n            }\r\n\r\n            separator = separator || this.getSeparator();\r\n\r\n            var val, i, l;\r\n\r\n            if (str === null || str.length < 1) {\r\n                return null;\r\n            }\r\n            val = str.split(separator);\r\n            for (i = 0, l = val.length; i < l; i = i + 1) {\r\n                val[i] = $.trim(val[i]);\r\n            }\r\n\r\n            return val;\r\n       },\r\n\r\n        autosubmit: function() {\r\n            this.$input.on('change', function(e, isInitial){\r\n                if(!isInitial) {\r\n                  $(this).closest('form').submit();\r\n                }\r\n            });\r\n        },\r\n\r\n        getSeparator: function() {\r\n            return this.options.select2.separator || $.fn.select2.defaults.separator;\r\n        },\r\n\r\n        /*\r\n        Converts source from x-editable format: {value: 1, text: \"1\"} to\r\n        select2 format: {id: 1, text: \"1\"}\r\n        */\r\n        convertSource: function(source) {\r\n            if($.isArray(source) && source.length && source[0].value !== undefined) {\r\n                for(var i = 0; i<source.length; i++) {\r\n                    if(source[i].value !== undefined) {\r\n                        source[i].id = source[i].value;\r\n                        delete source[i].value;\r\n                    }\r\n                }\r\n            }\r\n            return source;\r\n        },\r\n        \r\n        destroy: function() {\r\n            if(this.$input.data('select2')) {\r\n                this.$input.select2('destroy');\r\n            }\r\n        }\r\n        \r\n    });\r\n\r\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <input type=\"hidden\">\r\n        **/\r\n        tpl:'<input type=\"hidden\">',\r\n        /**\r\n        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).\r\n\r\n        @property select2 \r\n        @type object\r\n        @default null\r\n        **/\r\n        select2: null,\r\n        /**\r\n        Placeholder attribute of select\r\n\r\n        @property placeholder \r\n        @type string\r\n        @default null\r\n        **/\r\n        placeholder: null,\r\n        /**\r\n        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.\r\n        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.\r\n        E.g. `[{id: 1, text: \"text1\"}, {id: 2, text: \"text2\"}, ...]`.\r\n\r\n        @property source \r\n        @type array|string|function\r\n        @default null        \r\n        **/\r\n        source: null,\r\n        /**\r\n        Separator used to display tags.\r\n\r\n        @property viewseparator \r\n        @type string\r\n        @default ', '        \r\n        **/\r\n        viewseparator: ', '\r\n    });\r\n\r\n    $.fn.editabletypes.select2 = Constructor;\r\n\r\n}(window.jQuery));\r\n\r\n/**\r\n* Combodate - 1.0.5\r\n* Dropdown date and time picker.\r\n* Converts text input into dropdowns to pick day, month, year, hour, minute and second.\r\n* Uses momentjs as datetime library http://momentjs.com.\r\n* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang \r\n*\r\n* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight\r\n* In combodate: \r\n* 12:00 pm --> 12:00 (24-h format, midday)\r\n* 12:00 am --> 00:00 (24-h format, midnight, start of day)\r\n* \r\n* Differs from momentjs parse rules:\r\n* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)\r\n* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)\r\n* \r\n* \r\n* Author: Vitaliy Potapov\r\n* Project page: http://github.com/vitalets/combodate\r\n* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.\r\n**/\r\n(function ($) {\r\n\r\n    var Combodate = function (element, options) {\r\n        this.$element = $(element);\r\n        if(!this.$element.is('input')) {\r\n            $.error('Combodate should be applied to INPUT element');\r\n            return;\r\n        }\r\n        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());\r\n        this.init();  \r\n     };\r\n\r\n    Combodate.prototype = {\r\n        constructor: Combodate, \r\n        init: function () {\r\n            this.map = {\r\n                //key   regexp    moment.method\r\n                day:    ['D',    'date'], \r\n                month:  ['M',    'month'], \r\n                year:   ['Y',    'year'], \r\n                hour:   ['[Hh]', 'hours'],\r\n                minute: ['m',    'minutes'], \r\n                second: ['s',    'seconds'],\r\n                ampm:   ['[Aa]', ''] \r\n            };\r\n            \r\n            this.$widget = $('<span class=\"combodate\"></span>').html(this.getTemplate());\r\n                      \r\n            this.initCombos();\r\n            \r\n            //update original input on change \r\n            this.$widget.on('change', 'select', $.proxy(function(e) {\r\n                this.$element.val(this.getValue()).change();\r\n                // update days count if month or year changes\r\n                if (this.options.smartDays) {\r\n                    if ($(e.target).is('.month') || $(e.target).is('.year')) {\r\n                        this.fillCombo('day');\r\n                    }\r\n                }\r\n            }, this));\r\n            \r\n            this.$widget.find('select').css('width', 'auto');\r\n                                       \r\n            // hide original input and insert widget                                       \r\n            this.$element.hide().after(this.$widget);\r\n            \r\n            // set initial value\r\n            this.setValue(this.$element.val() || this.options.value);\r\n        },\r\n        \r\n        /*\r\n         Replace tokens in template with <select> elements \r\n        */         \r\n        getTemplate: function() {\r\n            var tpl = this.options.template;\r\n\r\n            //first pass\r\n            $.each(this.map, function(k, v) {\r\n                v = v[0]; \r\n                var r = new RegExp(v+'+'),\r\n                    token = v.length > 1 ? v.substring(1, 2) : v;\r\n                    \r\n                tpl = tpl.replace(r, '{'+token+'}');\r\n            });\r\n\r\n            //replace spaces with &nbsp;\r\n            tpl = tpl.replace(/ /g, '&nbsp;');\r\n\r\n            //second pass\r\n            $.each(this.map, function(k, v) {\r\n                v = v[0];\r\n                var token = v.length > 1 ? v.substring(1, 2) : v;\r\n                    \r\n                tpl = tpl.replace('{'+token+'}', '<select class=\"'+k+'\"></select>');\r\n            });   \r\n\r\n            return tpl;\r\n        },\r\n        \r\n        /*\r\n         Initialize combos that presents in template \r\n        */        \r\n        initCombos: function() {\r\n            for (var k in this.map) {\r\n                var $c = this.$widget.find('.'+k);\r\n                // set properties like this.$day, this.$month etc.\r\n                this['$'+k] = $c.length ? $c : null;\r\n                // fill with items\r\n                this.fillCombo(k);\r\n            }\r\n        },\r\n\r\n        /*\r\n         Fill combo with items \r\n        */        \r\n        fillCombo: function(k) {\r\n            var $combo = this['$'+k];\r\n            if (!$combo) {\r\n                return;\r\n            }\r\n\r\n            // define method name to fill items, e.g `fillDays`\r\n            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1); \r\n            var items = this[f]();\r\n            var value = $combo.val();\r\n\r\n            $combo.empty();\r\n            for(var i=0; i<items.length; i++) {\r\n                $combo.append('<option value=\"'+items[i][0]+'\">'+items[i][1]+'</option>');\r\n            }\r\n\r\n            $combo.val(value);\r\n        },\r\n\r\n        /*\r\n         Initialize items of combos. Handles `firstItem` option \r\n        */\r\n        fillCommon: function(key) {\r\n            var values = [],\r\n                relTime;\r\n                \r\n            if(this.options.firstItem === 'name') {\r\n                //need both to support moment ver < 2 and  >= 2\r\n                relTime = moment.relativeTime || moment.langData()._relativeTime; \r\n                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];\r\n                //take last entry (see momentjs lang files structure) \r\n                header = header.split(' ').reverse()[0];                \r\n                values.push(['', header]);\r\n            } else if(this.options.firstItem === 'empty') {\r\n                values.push(['', '']);\r\n            }\r\n            return values;\r\n        },  \r\n\r\n\r\n        /*\r\n        fill day\r\n        */\r\n        fillDay: function() {\r\n            var items = this.fillCommon('d'), name, i,\r\n                twoDigit = this.options.template.indexOf('DD') !== -1,\r\n                daysCount = 31;\r\n\r\n            // detect days count (depends on month and year)\r\n            // originally https://github.com/vitalets/combodate/pull/7\r\n            if (this.options.smartDays && this.$month && this.$year) {\r\n                var month = parseInt(this.$month.val(), 10);\r\n                var year = parseInt(this.$year.val(), 10);\r\n\r\n                if (!isNaN(month) && !isNaN(year)) {\r\n                    daysCount = moment([year, month]).daysInMonth();\r\n                }\r\n            }\r\n\r\n            for (i = 1; i <= daysCount; i++) {\r\n                name = twoDigit ? this.leadZero(i) : i;\r\n                items.push([i, name]);\r\n            }\r\n            return items;        \r\n        },\r\n        \r\n        /*\r\n        fill month\r\n        */\r\n        fillMonth: function() {\r\n            var items = this.fillCommon('M'), name, i, \r\n                longNames = this.options.template.indexOf('MMMM') !== -1,\r\n                shortNames = this.options.template.indexOf('MMM') !== -1,\r\n                twoDigit = this.options.template.indexOf('MM') !== -1;\r\n                \r\n            for(i=0; i<=11; i++) {\r\n                if(longNames) {\r\n                    //see https://github.com/timrwood/momentjs.com/pull/36\r\n                    name = moment().date(1).month(i).format('MMMM');\r\n                } else if(shortNames) {\r\n                    name = moment().date(1).month(i).format('MMM');\r\n                } else if(twoDigit) {\r\n                    name = this.leadZero(i+1);\r\n                } else {\r\n                    name = i+1;\r\n                }\r\n                items.push([i, name]);\r\n            } \r\n            return items;\r\n        },  \r\n        \r\n        /*\r\n        fill year\r\n        */\r\n        fillYear: function() {\r\n            var items = [], name, i, \r\n                longNames = this.options.template.indexOf('YYYY') !== -1;\r\n           \r\n            for(i=this.options.maxYear; i>=this.options.minYear; i--) {\r\n                name = longNames ? i : (i+'').substring(2);\r\n                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);\r\n            }\r\n            \r\n            items = this.fillCommon('y').concat(items);\r\n            \r\n            return items;              \r\n        },    \r\n        \r\n        /*\r\n        fill hour\r\n        */\r\n        fillHour: function() {\r\n            var items = this.fillCommon('h'), name, i,\r\n                h12 = this.options.template.indexOf('h') !== -1,\r\n                h24 = this.options.template.indexOf('H') !== -1,\r\n                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,\r\n                min = h12 ? 1 : 0, \r\n                max = h12 ? 12 : 23;\r\n                \r\n            for(i=min; i<=max; i++) {\r\n                name = twoDigit ? this.leadZero(i) : i;\r\n                items.push([i, name]);\r\n            } \r\n            return items;                 \r\n        },    \r\n        \r\n        /*\r\n        fill minute\r\n        */\r\n        fillMinute: function() {\r\n            var items = this.fillCommon('m'), name, i,\r\n                twoDigit = this.options.template.indexOf('mm') !== -1;\r\n\r\n            for(i=0; i<=59; i+= this.options.minuteStep) {\r\n                name = twoDigit ? this.leadZero(i) : i;\r\n                items.push([i, name]);\r\n            }    \r\n            return items;              \r\n        },  \r\n        \r\n        /*\r\n        fill second\r\n        */\r\n        fillSecond: function() {\r\n            var items = this.fillCommon('s'), name, i,\r\n                twoDigit = this.options.template.indexOf('ss') !== -1;\r\n\r\n            for(i=0; i<=59; i+= this.options.secondStep) {\r\n                name = twoDigit ? this.leadZero(i) : i;\r\n                items.push([i, name]);\r\n            }    \r\n            return items;              \r\n        },  \r\n        \r\n        /*\r\n        fill ampm\r\n        */\r\n        fillAmpm: function() {\r\n            var ampmL = this.options.template.indexOf('a') !== -1,\r\n                ampmU = this.options.template.indexOf('A') !== -1,            \r\n                items = [\r\n                    ['am', ampmL ? 'am' : 'AM'],\r\n                    ['pm', ampmL ? 'pm' : 'PM']\r\n                ];\r\n            return items;                              \r\n        },                                       \r\n\r\n        /*\r\n         Returns current date value from combos. \r\n         If format not specified - `options.format` used.\r\n         If format = `null` - Moment object returned.\r\n        */\r\n        getValue: function(format) {\r\n            var dt, values = {}, \r\n                that = this,\r\n                notSelected = false;\r\n                \r\n            //getting selected values    \r\n            $.each(this.map, function(k, v) {\r\n                if(k === 'ampm') {\r\n                    return;\r\n                }\r\n                var def = k === 'day' ? 1 : 0;\r\n                  \r\n                values[k] = that['$'+k] ? parseInt(that['$'+k].val(), 10) : def; \r\n                \r\n                if(isNaN(values[k])) {\r\n                   notSelected = true;\r\n                   return false; \r\n                }\r\n            });\r\n            \r\n            //if at least one visible combo not selected - return empty string\r\n            if(notSelected) {\r\n               return '';\r\n            }\r\n            \r\n            //convert hours 12h --> 24h \r\n            if(this.$ampm) {\r\n                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\r\n                if(values.hour === 12) {\r\n                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;                    \r\n                } else {\r\n                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour+12;\r\n                }\r\n            }    \r\n            \r\n            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);\r\n            \r\n            //highlight invalid date\r\n            this.highlight(dt);\r\n                              \r\n            format = format === undefined ? this.options.format : format;\r\n            if(format === null) {\r\n               return dt.isValid() ? dt : null; \r\n            } else {\r\n               return dt.isValid() ? dt.format(format) : ''; \r\n            }           \r\n        },\r\n        \r\n        setValue: function(value) {\r\n            if(!value) {\r\n                return;\r\n            }\r\n            \r\n            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),\r\n                that = this,\r\n                values = {};\r\n            \r\n            //function to find nearest value in select options\r\n            function getNearest($select, value) {\r\n                var delta = {};\r\n                $select.children('option').each(function(i, opt){\r\n                    var optValue = $(opt).attr('value'),\r\n                    distance;\r\n\r\n                    if(optValue === '') return;\r\n                    distance = Math.abs(optValue - value); \r\n                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {\r\n                        delta = {value: optValue, distance: distance};\r\n                    } \r\n                }); \r\n                return delta.value;\r\n            }             \r\n            \r\n            if(dt.isValid()) {\r\n                //read values from date object\r\n                $.each(this.map, function(k, v) {\r\n                    if(k === 'ampm') {\r\n                       return; \r\n                    }\r\n                    values[k] = dt[v[1]]();\r\n                });\r\n               \r\n                if(this.$ampm) {\r\n                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)\r\n                    if(values.hour >= 12) {\r\n                        values.ampm = 'pm';\r\n                        if(values.hour > 12) {\r\n                            values.hour -= 12;\r\n                        }\r\n                    } else {\r\n                        values.ampm = 'am';\r\n                        if(values.hour === 0) {\r\n                            values.hour = 12;\r\n                        }\r\n                    } \r\n                }\r\n               \r\n                $.each(values, function(k, v) {\r\n                    //call val() for each existing combo, e.g. this.$hour.val()\r\n                    if(that['$'+k]) {\r\n                       \r\n                        if(k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {\r\n                           v = getNearest(that['$'+k], v);\r\n                        }\r\n                       \r\n                        if(k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {\r\n                           v = getNearest(that['$'+k], v);\r\n                        }                       \r\n                       \r\n                        that['$'+k].val(v);\r\n                    }\r\n                });\r\n\r\n                // update days count\r\n                if (this.options.smartDays) {\r\n                    this.fillCombo('day');\r\n                }\r\n               \r\n               this.$element.val(dt.format(this.options.format)).change();\r\n            }\r\n        },\r\n        \r\n        /*\r\n         highlight combos if date is invalid\r\n        */\r\n        highlight: function(dt) {\r\n            if(!dt.isValid()) {\r\n                if(this.options.errorClass) {\r\n                    this.$widget.addClass(this.options.errorClass);\r\n                } else {\r\n                    //store original border color\r\n                    if(!this.borderColor) {\r\n                        this.borderColor = this.$widget.find('select').css('border-color'); \r\n                    }\r\n                    this.$widget.find('select').css('border-color', 'red');\r\n                } \r\n            } else {\r\n                if(this.options.errorClass) {\r\n                    this.$widget.removeClass(this.options.errorClass);\r\n                } else {\r\n                    this.$widget.find('select').css('border-color', this.borderColor);\r\n                }  \r\n            }\r\n        },\r\n        \r\n        leadZero: function(v) {\r\n            return v <= 9 ? '0' + v : v; \r\n        },\r\n        \r\n        destroy: function() {\r\n            this.$widget.remove();\r\n            this.$element.removeData('combodate').show();\r\n        }\r\n        \r\n        //todo: clear method        \r\n    };\r\n\r\n    $.fn.combodate = function ( option ) {\r\n        var d, args = Array.apply(null, arguments);\r\n        args.shift();\r\n\r\n        //getValue returns date as string / object (not jQuery object)\r\n        if(option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {\r\n          return d.getValue.apply(d, args);\r\n        }        \r\n        \r\n        return this.each(function () {\r\n            var $this = $(this),\r\n            data = $this.data('combodate'),\r\n            options = typeof option == 'object' && option;\r\n            if (!data) {\r\n                $this.data('combodate', (data = new Combodate(this, options)));\r\n            }\r\n            if (typeof option == 'string' && typeof data[option] == 'function') {\r\n                data[option].apply(data, args);\r\n            }\r\n        });\r\n    };  \r\n    \r\n    $.fn.combodate.defaults = {\r\n         //in this format value stored in original input\r\n        format: 'DD-MM-YYYY HH:mm',      \r\n        //in this format items in dropdowns are displayed\r\n        template: 'D / MMM / YYYY   H : mm',\r\n        //initial value, can be `new Date()`    \r\n        value: null,                       \r\n        minYear: 1970,\r\n        maxYear: 2015,\r\n        yearDescending: true,\r\n        minuteStep: 5,\r\n        secondStep: 1,\r\n        firstItem: 'empty', //'name', 'empty', 'none'\r\n        errorClass: null,\r\n        roundTime: true, // whether to round minutes and seconds if step > 1\r\n        smartDays: false // whether days in combo depend on selected month: 31, 30, 28\r\n    };\r\n\r\n}(window.jQuery));\r\n/**\r\nCombodate input - dropdown date and time picker.    \r\nBased on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).\r\n\r\n    <script src=\"js/moment.min.js\"></script>\r\n   \r\nAllows to input:\r\n\r\n* only date\r\n* only time \r\n* both date and time  \r\n\r\nPlease note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  \r\nInternally value stored as `momentjs` object. \r\n\r\n@class combodate\r\n@extends abstractinput\r\n@final\r\n@since 1.4.0\r\n@example\r\n<a href=\"#\" id=\"dob\" data-type=\"combodate\" data-pk=\"1\" data-url=\"/post\" data-value=\"1984-05-15\" data-title=\"Select date\"></a>\r\n<script>\r\n$(function(){\r\n    $('#dob').editable({\r\n        format: 'YYYY-MM-DD',    \r\n        viewformat: 'DD.MM.YYYY',    \r\n        template: 'D / MMMM / YYYY',    \r\n        combodate: {\r\n                minYear: 2000,\r\n                maxYear: 2015,\r\n                minuteStep: 1\r\n           }\r\n        }\r\n    });\r\n});\r\n</script>\r\n**/\r\n\r\n/*global moment*/\r\n\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var Constructor = function (options) {\r\n        this.init('combodate', options, Constructor.defaults);\r\n        \r\n        //by default viewformat equals to format\r\n        if(!this.options.viewformat) {\r\n            this.options.viewformat = this.options.format;\r\n        }        \r\n        \r\n        //try parse combodate config defined as json string in data-combodate\r\n        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);\r\n\r\n        //overriding combodate config (as by default jQuery extend() is not recursive)\r\n        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {\r\n            format: this.options.format,\r\n            template: this.options.template\r\n        });\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);    \r\n    \r\n    $.extend(Constructor.prototype, {\r\n        render: function () {\r\n            this.$input.combodate(this.options.combodate);\r\n                    \r\n            if($.fn.editableform.engine === 'bs3') {\r\n                this.$input.siblings().find('select').addClass('form-control');\r\n            }\r\n            \r\n            if(this.options.inputclass) {\r\n                this.$input.siblings().find('select').addClass(this.options.inputclass);\r\n            }            \r\n            //\"clear\" link\r\n            /*\r\n            if(this.options.clear) {\r\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this.clear();\r\n                }, this));\r\n                \r\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \r\n            } \r\n            */               \r\n        },\r\n        \r\n        value2html: function(value, element) {\r\n            var text = value ? value.format(this.options.viewformat) : '';\r\n            //$(element).text(text);\r\n            Constructor.superclass.value2html.call(this, text, element);  \r\n        },\r\n\r\n        html2value: function(html) {\r\n            return html ? moment(html, this.options.viewformat) : null;\r\n        },   \r\n        \r\n        value2str: function(value) {\r\n            return value ? value.format(this.options.format) : '';\r\n       }, \r\n       \r\n       str2value: function(str) {\r\n           return str ? moment(str, this.options.format) : null;\r\n       }, \r\n       \r\n       value2submit: function(value) {\r\n           return this.value2str(value);\r\n       },                    \r\n\r\n       value2input: function(value) {\r\n           this.$input.combodate('setValue', value);\r\n       },\r\n        \r\n       input2value: function() { \r\n           return this.$input.combodate('getValue', null);\r\n       },       \r\n       \r\n       activate: function() {\r\n           this.$input.siblings('.combodate').find('select').eq(0).focus();\r\n       },\r\n       \r\n       /*\r\n       clear:  function() {\r\n          this.$input.data('datepicker').date = null;\r\n          this.$input.find('.active').removeClass('active');\r\n       },\r\n       */\r\n       \r\n       autosubmit: function() {\r\n           \r\n       }\r\n\r\n    });\r\n    \r\n    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <input type=\"text\">\r\n        **/         \r\n        tpl:'<input type=\"text\">',\r\n        /**\r\n        @property inputclass \r\n        @default null\r\n        **/         \r\n        inputclass: null,\r\n        /**\r\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\r\n        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)  \r\n        \r\n        @property format \r\n        @type string\r\n        @default YYYY-MM-DD\r\n        **/         \r\n        format:'YYYY-MM-DD',\r\n        /**\r\n        Format used for displaying date. Also applied when converting date from element's text on init.   \r\n        If not specified equals to `format`.\r\n        \r\n        @property viewformat \r\n        @type string\r\n        @default null\r\n        **/          \r\n        viewformat: null,        \r\n        /**\r\n        Template used for displaying dropdowns.\r\n        \r\n        @property template \r\n        @type string\r\n        @default D / MMM / YYYY\r\n        **/          \r\n        template: 'D / MMM / YYYY',  \r\n        /**\r\n        Configuration of combodate.\r\n        Full list of options: http://vitalets.github.com/combodate/#docs\r\n        \r\n        @property combodate \r\n        @type object\r\n        @default null\r\n        **/\r\n        combodate: null\r\n        \r\n        /*\r\n        (not implemented yet)\r\n        Text shown as clear date button. \r\n        If <code>false</code> clear button will not be rendered.\r\n        \r\n        @property clear \r\n        @type boolean|string\r\n        @default 'x clear'         \r\n        */\r\n        //clear: '&times; clear'\r\n    });   \r\n\r\n    $.fn.editabletypes.combodate = Constructor;\r\n\r\n}(window.jQuery));\r\n\r\n/*\r\nEditableform based on Twitter Bootstrap 3\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    //store parent methods\r\n    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;\r\n    \r\n    $.extend($.fn.editableform.Constructor.prototype, {\r\n        initTemplate: function() {\r\n            this.$form = $($.fn.editableform.template); \r\n            this.$form.find('.control-group').addClass('form-group');\r\n            this.$form.find('.editable-error-block').addClass('help-block');\r\n        },\r\n        initInput: function() {  \r\n            pInitInput.apply(this);\r\n\r\n            //for bs3 set default class `input-sm` to standard inputs\r\n            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;\r\n            var defaultClass = 'input-sm';\r\n            \r\n            //bs3 add `form-control` class to standard inputs\r\n            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(','); \r\n            if(~$.inArray(this.input.type, stdtypes)) {\r\n                this.input.$input.addClass('form-control');\r\n                if(emptyInputClass) {\r\n                    this.input.options.inputclass = defaultClass;\r\n                    this.input.$input.addClass(defaultClass);\r\n                }\r\n            }             \r\n        \r\n            //apply bs3 size class also to buttons (to fit size of control)\r\n            var $btn = this.$form.find('.editable-buttons');\r\n            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');\r\n            for(var i=0; i<classes.length; i++) {\r\n                // `btn-sm` is default now\r\n                /*\r\n                if(classes[i].toLowerCase() === 'input-sm') { \r\n                    $btn.find('button').addClass('btn-sm');  \r\n                }\r\n                */\r\n                if(classes[i].toLowerCase() === 'input-lg') {\r\n                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg'); \r\n                }\r\n            }\r\n        }\r\n    });    \r\n    \r\n    //buttons\r\n    $.fn.editableform.buttons = \r\n      '<button type=\"submit\" class=\"btn btn-primary btn-sm editable-submit\">'+\r\n        '<i class=\"glyphicon glyphicon-ok\"></i>'+\r\n      '</button>'+\r\n      '<button type=\"button\" class=\"btn btn-default btn-sm editable-cancel\">'+\r\n        '<i class=\"glyphicon glyphicon-remove\"></i>'+\r\n      '</button>';         \r\n    \r\n    //error classes\r\n    $.fn.editableform.errorGroupClass = 'has-error';\r\n    $.fn.editableform.errorBlockClass = null;  \r\n    //engine\r\n    $.fn.editableform.engine = 'bs3';  \r\n}(window.jQuery));\r\n/**\r\n* Editable Popover3 (for Bootstrap 3) \r\n* ---------------------\r\n* requires bootstrap-popover.js\r\n*/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    //extend methods\r\n    $.extend($.fn.editableContainer.Popup.prototype, {\r\n        containerName: 'popover',\r\n        containerDataName: 'bs.popover',\r\n        innerCss: '.popover-content',\r\n        defaults: $.fn.popover.Constructor.DEFAULTS,\r\n\r\n        initContainer: function(){\r\n            $.extend(this.containerOptions, {\r\n                trigger: 'manual',\r\n                selector: false,\r\n                content: ' ',\r\n                template: this.defaults.template\r\n            });\r\n            \r\n            //as template property is used in inputs, hide it from popover\r\n            var t;\r\n            if(this.$element.data('template')) {\r\n               t = this.$element.data('template');\r\n               this.$element.removeData('template');  \r\n            } \r\n            \r\n            this.call(this.containerOptions);\r\n            \r\n            if(t) {\r\n               //restore data('template')\r\n               this.$element.data('template', t); \r\n            }\r\n        }, \r\n        \r\n        /* show */\r\n        innerShow: function () {\r\n            this.call('show');                \r\n        },  \r\n        \r\n        /* hide */\r\n        innerHide: function () {\r\n            this.call('hide');       \r\n        }, \r\n        \r\n        /* destroy */\r\n        innerDestroy: function() {\r\n            this.call('destroy');\r\n        },                               \r\n        \r\n        setContainerOption: function(key, value) {\r\n            this.container().options[key] = value; \r\n        },               \r\n\r\n        /**\r\n        * move popover to new position. This function mainly copied from bootstrap-popover.\r\n        */\r\n        /*jshint laxcomma: true, eqeqeq: false*/\r\n        setPosition: function () { \r\n\r\n            (function() {\r\n            /*    \r\n                var $tip = this.tip()\r\n                , inside\r\n                , pos\r\n                , actualWidth\r\n                , actualHeight\r\n                , placement\r\n                , tp\r\n                , tpt\r\n                , tpb\r\n                , tpl\r\n                , tpr;\r\n\r\n                placement = typeof this.options.placement === 'function' ?\r\n                this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n                this.options.placement;\r\n\r\n                inside = /in/.test(placement);\r\n               \r\n                $tip\r\n              //  .detach()\r\n              //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover\r\n                .removeClass('top right bottom left')\r\n                .css({ top: 0, left: 0, display: 'block' });\r\n              //  .insertAfter(this.$element);\r\n               \r\n                pos = this.getPosition(inside);\r\n\r\n                actualWidth = $tip[0].offsetWidth;\r\n                actualHeight = $tip[0].offsetHeight;\r\n\r\n                placement = inside ? placement.split(' ')[1] : placement;\r\n\r\n                tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};\r\n                tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};\r\n                tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};\r\n                tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};\r\n\r\n                switch (placement) {\r\n                    case 'bottom':\r\n                        if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {\r\n                            if (tpt.top > $(window).scrollTop()) {\r\n                                placement = 'top';\r\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\r\n                                placement = 'right';\r\n                            } else if (tpl.left > $(window).scrollLeft()) {\r\n                                placement = 'left';\r\n                            } else {\r\n                                placement = 'right';\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'top':\r\n                        if (tpt.top < $(window).scrollTop()) {\r\n                            if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {\r\n                                placement = 'bottom';\r\n                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\r\n                                placement = 'right';\r\n                            } else if (tpl.left > $(window).scrollLeft()) {\r\n                                placement = 'left';\r\n                            } else {\r\n                                placement = 'right';\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'left':\r\n                        if (tpl.left < $(window).scrollLeft()) {\r\n                            if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {\r\n                                placement = 'right';\r\n                            } else if (tpt.top > $(window).scrollTop()) {\r\n                                placement = 'top';\r\n                            } else if (tpt.top > $(window).scrollTop()) {\r\n                                placement = 'bottom';\r\n                            } else {\r\n                                placement = 'right';\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'right':\r\n                        if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {\r\n                            if (tpl.left > $(window).scrollLeft()) {\r\n                                placement = 'left';\r\n                            } else if (tpt.top > $(window).scrollTop()) {\r\n                                placement = 'top';\r\n                            } else if (tpt.top > $(window).scrollTop()) {\r\n                                placement = 'bottom';\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                switch (placement) {\r\n                    case 'bottom':\r\n                        tp = tpb;\r\n                        break;\r\n                    case 'top':\r\n                        tp = tpt;\r\n                        break;\r\n                    case 'left':\r\n                        tp = tpl;\r\n                        break;\r\n                    case 'right':\r\n                        tp = tpr;\r\n                        break;\r\n                }\r\n\r\n                $tip\r\n                .offset(tp)\r\n                .addClass(placement)\r\n                .addClass('in');\r\n           */\r\n                     \r\n           \r\n            var $tip = this.tip();\r\n            \r\n            var placement = typeof this.options.placement == 'function' ?\r\n                this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n                this.options.placement;            \r\n\r\n            var autoToken = /\\s?auto?\\s?/i;\r\n            var autoPlace = autoToken.test(placement);\r\n            if (autoPlace) {\r\n                placement = placement.replace(autoToken, '') || 'top';\r\n            }\r\n            \r\n            \r\n            var pos = this.getPosition();\r\n            var actualWidth = $tip[0].offsetWidth;\r\n            var actualHeight = $tip[0].offsetHeight;\r\n\r\n            if (autoPlace) {\r\n                var $parent = this.$element.parent();\r\n\r\n                var orgPlacement = placement;\r\n                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop;\r\n                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth();\r\n                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();\r\n                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left;\r\n\r\n                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :\r\n                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :\r\n                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :\r\n                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :\r\n                            placement;\r\n\r\n                $tip\r\n                  .removeClass(orgPlacement)\r\n                  .addClass(placement);\r\n            }\r\n\r\n\r\n            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n\r\n            this.applyPlacement(calculatedOffset, placement);            \r\n                     \r\n                \r\n            }).call(this.container());\r\n          /*jshint laxcomma: false, eqeqeq: true*/  \r\n        }            \r\n    });\r\n\r\n}(window.jQuery));\r\n\r\n/* =========================================================\r\n * bootstrap-datepicker.js\r\n * http://www.eyecon.ro/bootstrap-datepicker\r\n * =========================================================\r\n * Copyright 2012 Stefan Petre\r\n * Improvements by Andrew Rowls\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ========================================================= */\r\n\r\n(function( $ ) {\r\n\r\n\tfunction UTCDate(){\r\n\t\treturn new Date(Date.UTC.apply(Date, arguments));\r\n\t}\r\n\tfunction UTCToday(){\r\n\t\tvar today = new Date();\r\n\t\treturn UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());\r\n\t}\r\n\r\n\t// Picker object\r\n\r\n\tvar Datepicker = function(element, options) {\r\n\t\tvar that = this;\r\n\r\n\t\tthis._process_options(options);\r\n\r\n\t\tthis.element = $(element);\r\n\t\tthis.isInline = false;\r\n\t\tthis.isInput = this.element.is('input');\r\n\t\tthis.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;\r\n\t\tthis.hasInput = this.component && this.element.find('input').length;\r\n\t\tif(this.component && this.component.length === 0)\r\n\t\t\tthis.component = false;\r\n\r\n\t\tthis.picker = $(DPGlobal.template);\r\n\t\tthis._buildEvents();\r\n\t\tthis._attachEvents();\r\n\r\n\t\tif(this.isInline) {\r\n\t\t\tthis.picker.addClass('datepicker-inline').appendTo(this.element);\r\n\t\t} else {\r\n\t\t\tthis.picker.addClass('datepicker-dropdown dropdown-menu');\r\n\t\t}\r\n\r\n\t\tif (this.o.rtl){\r\n\t\t\tthis.picker.addClass('datepicker-rtl');\r\n\t\t\tthis.picker.find('.prev i, .next i')\r\n\t\t\t\t\t\t.toggleClass('icon-arrow-left icon-arrow-right');\r\n\t\t}\r\n\r\n\r\n\t\tthis.viewMode = this.o.startView;\r\n\r\n\t\tif (this.o.calendarWeeks)\r\n\t\t\tthis.picker.find('tfoot th.today')\r\n\t\t\t\t\t\t.attr('colspan', function(i, val){\r\n\t\t\t\t\t\t\treturn parseInt(val) + 1;\r\n\t\t\t\t\t\t});\r\n\r\n\t\tthis._allow_update = false;\r\n\r\n\t\tthis.setStartDate(this.o.startDate);\r\n\t\tthis.setEndDate(this.o.endDate);\r\n\t\tthis.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);\r\n\r\n\t\tthis.fillDow();\r\n\t\tthis.fillMonths();\r\n\r\n\t\tthis._allow_update = true;\r\n\r\n\t\tthis.update();\r\n\t\tthis.showMode();\r\n\r\n\t\tif(this.isInline) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t};\r\n\r\n\tDatepicker.prototype = {\r\n\t\tconstructor: Datepicker,\r\n\r\n\t\t_process_options: function(opts){\r\n\t\t\t// Store raw options for reference\r\n\t\t\tthis._o = $.extend({}, this._o, opts);\r\n\t\t\t// Processed options\r\n\t\t\tvar o = this.o = $.extend({}, this._o);\r\n\r\n\t\t\t// Check if \"de-DE\" style date is available, if not language should\r\n\t\t\t// fallback to 2 letter code eg \"de\"\r\n\t\t\tvar lang = o.language;\r\n\t\t\tif (!dates[lang]) {\r\n\t\t\t\tlang = lang.split('-')[0];\r\n\t\t\t\tif (!dates[lang])\r\n\t\t\t\t\tlang = defaults.language;\r\n\t\t\t}\r\n\t\t\to.language = lang;\r\n\r\n\t\t\tswitch(o.startView){\r\n\t\t\t\tcase 2:\r\n\t\t\t\tcase 'decade':\r\n\t\t\t\t\to.startView = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 'year':\r\n\t\t\t\t\to.startView = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\to.startView = 0;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (o.minViewMode) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 'months':\r\n\t\t\t\t\to.minViewMode = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\tcase 'years':\r\n\t\t\t\t\to.minViewMode = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\to.minViewMode = 0;\r\n\t\t\t}\r\n\r\n\t\t\to.startView = Math.max(o.startView, o.minViewMode);\r\n\r\n\t\t\to.weekStart %= 7;\r\n\t\t\to.weekEnd = ((o.weekStart + 6) % 7);\r\n\r\n\t\t\tvar format = DPGlobal.parseFormat(o.format)\r\n\t\t\tif (o.startDate !== -Infinity) {\r\n\t\t\t\to.startDate = DPGlobal.parseDate(o.startDate, format, o.language);\r\n\t\t\t}\r\n\t\t\tif (o.endDate !== Infinity) {\r\n\t\t\t\to.endDate = DPGlobal.parseDate(o.endDate, format, o.language);\r\n\t\t\t}\r\n\r\n\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled||[];\r\n\t\t\tif (!$.isArray(o.daysOfWeekDisabled))\r\n\t\t\t\to.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\\s]*/);\r\n\t\t\to.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {\r\n\t\t\t\treturn parseInt(d, 10);\r\n\t\t\t});\r\n\t\t},\r\n\t\t_events: [],\r\n\t\t_secondaryEvents: [],\r\n\t\t_applyEvents: function(evs){\r\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){\r\n\t\t\t\tel = evs[i][0];\r\n\t\t\t\tev = evs[i][1];\r\n\t\t\t\tel.on(ev);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_unapplyEvents: function(evs){\r\n\t\t\tfor (var i=0, el, ev; i<evs.length; i++){\r\n\t\t\t\tel = evs[i][0];\r\n\t\t\t\tev = evs[i][1];\r\n\t\t\t\tel.off(ev);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_buildEvents: function(){\r\n\t\t\tif (this.isInput) { // single input\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t[this.element, {\r\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),\r\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\r\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\telse if (this.component && this.hasInput){ // component: input + button\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t// For components that are not readonly, allow keyboard nav\r\n\t\t\t\t\t[this.element.find('input'), {\r\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),\r\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\r\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)\r\n\t\t\t\t\t}],\r\n\t\t\t\t\t[this.component, {\r\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\telse if (this.element.is('div')) {  // inline datepicker\r\n\t\t\t\tthis.isInline = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t[this.element, {\r\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\r\n\t\t\tthis._secondaryEvents = [\r\n\t\t\t\t[this.picker, {\r\n\t\t\t\t\tclick: $.proxy(this.click, this)\r\n\t\t\t\t}],\r\n\t\t\t\t[$(window), {\r\n\t\t\t\t\tresize: $.proxy(this.place, this)\r\n\t\t\t\t}],\r\n\t\t\t\t[$(document), {\r\n\t\t\t\t\tmousedown: $.proxy(function (e) {\r\n\t\t\t\t\t\t// Clicked outside the datepicker, hide it\r\n\t\t\t\t\t\tif (!(\r\n\t\t\t\t\t\t\tthis.element.is(e.target) ||\r\n\t\t\t\t\t\t\tthis.element.find(e.target).size() ||\r\n\t\t\t\t\t\t\tthis.picker.is(e.target) ||\r\n\t\t\t\t\t\t\tthis.picker.find(e.target).size()\r\n\t\t\t\t\t\t)) {\r\n\t\t\t\t\t\t\tthis.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this)\r\n\t\t\t\t}]\r\n\t\t\t];\r\n\t\t},\r\n\t\t_attachEvents: function(){\r\n\t\t\tthis._detachEvents();\r\n\t\t\tthis._applyEvents(this._events);\r\n\t\t},\r\n\t\t_detachEvents: function(){\r\n\t\t\tthis._unapplyEvents(this._events);\r\n\t\t},\r\n\t\t_attachSecondaryEvents: function(){\r\n\t\t\tthis._detachSecondaryEvents();\r\n\t\t\tthis._applyEvents(this._secondaryEvents);\r\n\t\t},\r\n\t\t_detachSecondaryEvents: function(){\r\n\t\t\tthis._unapplyEvents(this._secondaryEvents);\r\n\t\t},\r\n\t\t_trigger: function(event, altdate){\r\n\t\t\tvar date = altdate || this.date,\r\n\t\t\t\tlocal_date = new Date(date.getTime() + (date.getTimezoneOffset()*60000));\r\n\r\n\t\t\tthis.element.trigger({\r\n\t\t\t\ttype: event,\r\n\t\t\t\tdate: local_date,\r\n\t\t\t\tformat: $.proxy(function(altformat){\r\n\t\t\t\t\tvar format = altformat || this.o.format;\r\n\t\t\t\t\treturn DPGlobal.formatDate(date, format, this.o.language);\r\n\t\t\t\t}, this)\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tshow: function(e) {\r\n\t\t\tif (!this.isInline)\r\n\t\t\t\tthis.picker.appendTo('body');\r\n\t\t\tthis.picker.show();\r\n\t\t\tthis.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\r\n\t\t\tthis.place();\r\n\t\t\tthis._attachSecondaryEvents();\r\n\t\t\tif (e) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t\tthis._trigger('show');\r\n\t\t},\r\n\r\n\t\thide: function(e){\r\n\t\t\tif(this.isInline) return;\r\n\t\t\tif (!this.picker.is(':visible')) return;\r\n\t\t\tthis.picker.hide().detach();\r\n\t\t\tthis._detachSecondaryEvents();\r\n\t\t\tthis.viewMode = this.o.startView;\r\n\t\t\tthis.showMode();\r\n\r\n\t\t\tif (\r\n\t\t\t\tthis.o.forceParse &&\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.isInput && this.element.val() ||\r\n\t\t\t\t\tthis.hasInput && this.element.find('input').val()\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t\tthis.setValue();\r\n\t\t\tthis._trigger('hide');\r\n\t\t},\r\n\r\n\t\tremove: function() {\r\n\t\t\tthis.hide();\r\n\t\t\tthis._detachEvents();\r\n\t\t\tthis._detachSecondaryEvents();\r\n\t\t\tthis.picker.remove();\r\n\t\t\tdelete this.element.data().datepicker;\r\n\t\t\tif (!this.isInput) {\r\n\t\t\t\tdelete this.element.data().date;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetDate: function() {\r\n\t\t\tvar d = this.getUTCDate();\r\n\t\t\treturn new Date(d.getTime() + (d.getTimezoneOffset()*60000));\r\n\t\t},\r\n\r\n\t\tgetUTCDate: function() {\r\n\t\t\treturn this.date;\r\n\t\t},\r\n\r\n\t\tsetDate: function(d) {\r\n\t\t\tthis.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));\r\n\t\t},\r\n\r\n\t\tsetUTCDate: function(d) {\r\n\t\t\tthis.date = d;\r\n\t\t\tthis.setValue();\r\n\t\t},\r\n\r\n\t\tsetValue: function() {\r\n\t\t\tvar formatted = this.getFormattedDate();\r\n\t\t\tif (!this.isInput) {\r\n\t\t\t\tif (this.component){\r\n\t\t\t\t\tthis.element.find('input').val(formatted);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.val(formatted);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetFormattedDate: function(format) {\r\n\t\t\tif (format === undefined)\r\n\t\t\t\tformat = this.o.format;\r\n\t\t\treturn DPGlobal.formatDate(this.date, format, this.o.language);\r\n\t\t},\r\n\r\n\t\tsetStartDate: function(startDate){\r\n\t\t\tthis._process_options({startDate: startDate});\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tsetEndDate: function(endDate){\r\n\t\t\tthis._process_options({endDate: endDate});\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tsetDaysOfWeekDisabled: function(daysOfWeekDisabled){\r\n\t\t\tthis._process_options({daysOfWeekDisabled: daysOfWeekDisabled});\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tplace: function(){\r\n\t\t\t\t\t\tif(this.isInline) return;\r\n\t\t\tvar zIndex = parseInt(this.element.parents().filter(function() {\r\n\t\t\t\t\t\t\treturn $(this).css('z-index') != 'auto';\r\n\t\t\t\t\t\t}).first().css('z-index'))+10;\r\n\t\t\tvar offset = this.component ? this.component.parent().offset() : this.element.offset();\r\n\t\t\tvar height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);\r\n\t\t\tthis.picker.css({\r\n\t\t\t\ttop: offset.top + height,\r\n\t\t\t\tleft: offset.left,\r\n\t\t\t\tzIndex: zIndex\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_allow_update: true,\r\n\t\tupdate: function(){\r\n\t\t\tif (!this._allow_update) return;\r\n\r\n\t\t\tvar date, fromArgs = false;\r\n\t\t\tif(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {\r\n\t\t\t\tdate = arguments[0];\r\n\t\t\t\tfromArgs = true;\r\n\t\t\t} else {\r\n\t\t\t\tdate = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();\r\n\t\t\t\tdelete this.element.data().date;\r\n\t\t\t}\r\n\r\n\t\t\tthis.date = DPGlobal.parseDate(date, this.o.format, this.o.language);\r\n\r\n\t\t\tif(fromArgs) this.setValue();\r\n\r\n\t\t\tif (this.date < this.o.startDate) {\r\n\t\t\t\tthis.viewDate = new Date(this.o.startDate);\r\n\t\t\t} else if (this.date > this.o.endDate) {\r\n\t\t\t\tthis.viewDate = new Date(this.o.endDate);\r\n\t\t\t} else {\r\n\t\t\t\tthis.viewDate = new Date(this.date);\r\n\t\t\t}\r\n\t\t\tthis.fill();\r\n\t\t},\r\n\r\n\t\tfillDow: function(){\r\n\t\t\tvar dowCnt = this.o.weekStart,\r\n\t\t\thtml = '<tr>';\r\n\t\t\tif(this.o.calendarWeeks){\r\n\t\t\t\tvar cell = '<th class=\"cw\">&nbsp;</th>';\r\n\t\t\t\thtml += cell;\r\n\t\t\t\tthis.picker.find('.datepicker-days thead tr:first-child').prepend(cell);\r\n\t\t\t}\r\n\t\t\twhile (dowCnt < this.o.weekStart + 7) {\r\n\t\t\t\thtml += '<th class=\"dow\">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';\r\n\t\t\t}\r\n\t\t\thtml += '</tr>';\r\n\t\t\tthis.picker.find('.datepicker-days thead').append(html);\r\n\t\t},\r\n\r\n\t\tfillMonths: function(){\r\n\t\t\tvar html = '',\r\n\t\t\ti = 0;\r\n\t\t\twhile (i < 12) {\r\n\t\t\t\thtml += '<span class=\"month\">'+dates[this.o.language].monthsShort[i++]+'</span>';\r\n\t\t\t}\r\n\t\t\tthis.picker.find('.datepicker-months td').html(html);\r\n\t\t},\r\n\r\n\t\tsetRange: function(range){\r\n\t\t\tif (!range || !range.length)\r\n\t\t\t\tdelete this.range;\r\n\t\t\telse\r\n\t\t\t\tthis.range = $.map(range, function(d){ return d.valueOf(); });\r\n\t\t\tthis.fill();\r\n\t\t},\r\n\r\n\t\tgetClassNames: function(date){\r\n\t\t\tvar cls = [],\r\n\t\t\t\tyear = this.viewDate.getUTCFullYear(),\r\n\t\t\t\tmonth = this.viewDate.getUTCMonth(),\r\n\t\t\t\tcurrentDate = this.date.valueOf(),\r\n\t\t\t\ttoday = new Date();\r\n\t\t\tif (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {\r\n\t\t\t\tcls.push('old');\r\n\t\t\t} else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {\r\n\t\t\t\tcls.push('new');\r\n\t\t\t}\r\n\t\t\t// Compare internal UTC date with local today, not UTC today\r\n\t\t\tif (this.o.todayHighlight &&\r\n\t\t\t\tdate.getUTCFullYear() == today.getFullYear() &&\r\n\t\t\t\tdate.getUTCMonth() == today.getMonth() &&\r\n\t\t\t\tdate.getUTCDate() == today.getDate()) {\r\n\t\t\t\tcls.push('today');\r\n\t\t\t}\r\n\t\t\tif (currentDate && date.valueOf() == currentDate) {\r\n\t\t\t\tcls.push('active');\r\n\t\t\t}\r\n\t\t\tif (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||\r\n\t\t\t\t$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {\r\n\t\t\t\tcls.push('disabled');\r\n\t\t\t}\r\n\t\t\tif (this.range){\r\n\t\t\t\tif (date > this.range[0] && date < this.range[this.range.length-1]){\r\n\t\t\t\t\tcls.push('range');\r\n\t\t\t\t}\r\n\t\t\t\tif ($.inArray(date.valueOf(), this.range) != -1){\r\n\t\t\t\t\tcls.push('selected');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn cls;\r\n\t\t},\r\n\r\n\t\tfill: function() {\r\n\t\t\tvar d = new Date(this.viewDate),\r\n\t\t\t\tyear = d.getUTCFullYear(),\r\n\t\t\t\tmonth = d.getUTCMonth(),\r\n\t\t\t\tstartYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\r\n\t\t\t\tstartMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\r\n\t\t\t\tendYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\r\n\t\t\t\tendMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\r\n\t\t\t\tcurrentDate = this.date && this.date.valueOf(),\r\n\t\t\t\ttooltip;\r\n\t\t\tthis.picker.find('.datepicker-days thead th.datepicker-switch')\r\n\t\t\t\t\t\t.text(dates[this.o.language].months[month]+' '+year);\r\n\t\t\tthis.picker.find('tfoot th.today')\r\n\t\t\t\t\t\t.text(dates[this.o.language].today)\r\n\t\t\t\t\t\t.toggle(this.o.todayBtn !== false);\r\n\t\t\tthis.picker.find('tfoot th.clear')\r\n\t\t\t\t\t\t.text(dates[this.o.language].clear)\r\n\t\t\t\t\t\t.toggle(this.o.clearBtn !== false);\r\n\t\t\tthis.updateNavArrows();\r\n\t\t\tthis.fillMonths();\r\n\t\t\tvar prevMonth = UTCDate(year, month-1, 28,0,0,0,0),\r\n\t\t\t\tday = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\r\n\t\t\tprevMonth.setUTCDate(day);\r\n\t\t\tprevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);\r\n\t\t\tvar nextMonth = new Date(prevMonth);\r\n\t\t\tnextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\r\n\t\t\tnextMonth = nextMonth.valueOf();\r\n\t\t\tvar html = [];\r\n\t\t\tvar clsName;\r\n\t\t\twhile(prevMonth.valueOf() < nextMonth) {\r\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekStart) {\r\n\t\t\t\t\thtml.push('<tr>');\r\n\t\t\t\t\tif(this.o.calendarWeeks){\r\n\t\t\t\t\t\t// ISO 8601: First week contains first thursday.\r\n\t\t\t\t\t\t// ISO also states week starts on Monday, but we can be more abstract here.\r\n\t\t\t\t\t\tvar\r\n\t\t\t\t\t\t\t// Start of current week: based on weekstart/current date\r\n\t\t\t\t\t\t\tws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),\r\n\t\t\t\t\t\t\t// Thursday of this week\r\n\t\t\t\t\t\t\tth = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\r\n\t\t\t\t\t\t\t// First Thursday of year, year from thursday\r\n\t\t\t\t\t\t\tyth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),\r\n\t\t\t\t\t\t\t// Calendar week: ms between thursdays, div ms per day, div 7 days\r\n\t\t\t\t\t\t\tcalWeek =  (th - yth) / 864e5 / 7 + 1;\r\n\t\t\t\t\t\thtml.push('<td class=\"cw\">'+ calWeek +'</td>');\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tclsName = this.getClassNames(prevMonth);\r\n\t\t\t\tclsName.push('day');\r\n\r\n\t\t\t\tvar before = this.o.beforeShowDay(prevMonth);\r\n\t\t\t\tif (before === undefined)\r\n\t\t\t\t\tbefore = {};\r\n\t\t\t\telse if (typeof(before) === 'boolean')\r\n\t\t\t\t\tbefore = {enabled: before};\r\n\t\t\t\telse if (typeof(before) === 'string')\r\n\t\t\t\t\tbefore = {classes: before};\r\n\t\t\t\tif (before.enabled === false)\r\n\t\t\t\t\tclsName.push('disabled');\r\n\t\t\t\tif (before.classes)\r\n\t\t\t\t\tclsName = clsName.concat(before.classes.split(/\\s+/));\r\n\t\t\t\tif (before.tooltip)\r\n\t\t\t\t\ttooltip = before.tooltip;\r\n\r\n\t\t\t\tclsName = $.unique(clsName);\r\n\t\t\t\thtml.push('<td class=\"'+clsName.join(' ')+'\"' + (tooltip ? ' title=\"'+tooltip+'\"' : '') + '>'+prevMonth.getUTCDate() + '</td>');\r\n\t\t\t\tif (prevMonth.getUTCDay() == this.o.weekEnd) {\r\n\t\t\t\t\thtml.push('</tr>');\r\n\t\t\t\t}\r\n\t\t\t\tprevMonth.setUTCDate(prevMonth.getUTCDate()+1);\r\n\t\t\t}\r\n\t\t\tthis.picker.find('.datepicker-days tbody').empty().append(html.join(''));\r\n\t\t\tvar currentYear = this.date && this.date.getUTCFullYear();\r\n\r\n\t\t\tvar months = this.picker.find('.datepicker-months')\r\n\t\t\t\t\t\t.find('th:eq(1)')\r\n\t\t\t\t\t\t\t.text(year)\r\n\t\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t.find('span').removeClass('active');\r\n\t\t\tif (currentYear && currentYear == year) {\r\n\t\t\t\tmonths.eq(this.date.getUTCMonth()).addClass('active');\r\n\t\t\t}\r\n\t\t\tif (year < startYear || year > endYear) {\r\n\t\t\t\tmonths.addClass('disabled');\r\n\t\t\t}\r\n\t\t\tif (year == startYear) {\r\n\t\t\t\tmonths.slice(0, startMonth).addClass('disabled');\r\n\t\t\t}\r\n\t\t\tif (year == endYear) {\r\n\t\t\t\tmonths.slice(endMonth+1).addClass('disabled');\r\n\t\t\t}\r\n\r\n\t\t\thtml = '';\r\n\t\t\tyear = parseInt(year/10, 10) * 10;\r\n\t\t\tvar yearCont = this.picker.find('.datepicker-years')\r\n\t\t\t\t\t\t\t\t.find('th:eq(1)')\r\n\t\t\t\t\t\t\t\t\t.text(year + '-' + (year + 9))\r\n\t\t\t\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t\t\t.find('td');\r\n\t\t\tyear -= 1;\r\n\t\t\tfor (var i = -1; i < 11; i++) {\r\n\t\t\t\thtml += '<span class=\"year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'\">'+year+'</span>';\r\n\t\t\t\tyear += 1;\r\n\t\t\t}\r\n\t\t\tyearCont.html(html);\r\n\t\t},\r\n\r\n\t\tupdateNavArrows: function() {\r\n\t\t\tif (!this._allow_update) return;\r\n\r\n\t\t\tvar d = new Date(this.viewDate),\r\n\t\t\t\tyear = d.getUTCFullYear(),\r\n\t\t\t\tmonth = d.getUTCMonth();\r\n\t\t\tswitch (this.viewMode) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclick: function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\tvar target = $(e.target).closest('span, td, th');\r\n\t\t\tif (target.length == 1) {\r\n\t\t\t\tswitch(target[0].nodeName.toLowerCase()) {\r\n\t\t\t\t\tcase 'th':\r\n\t\t\t\t\t\tswitch(target[0].className) {\r\n\t\t\t\t\t\t\tcase 'datepicker-switch':\r\n\t\t\t\t\t\t\t\tthis.showMode(1);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'prev':\r\n\t\t\t\t\t\t\tcase 'next':\r\n\t\t\t\t\t\t\t\tvar dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);\r\n\t\t\t\t\t\t\t\tswitch(this.viewMode){\r\n\t\t\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.fill();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'today':\r\n\t\t\t\t\t\t\t\tvar date = new Date();\r\n\t\t\t\t\t\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\r\n\r\n\t\t\t\t\t\t\t\tthis.showMode(-2);\r\n\t\t\t\t\t\t\t\tvar which = this.o.todayBtn == 'linked' ? null : 'view';\r\n\t\t\t\t\t\t\t\tthis._setDate(date, which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'clear':\r\n\t\t\t\t\t\t\t\tvar element;\r\n\t\t\t\t\t\t\t\tif (this.isInput)\r\n\t\t\t\t\t\t\t\t\telement = this.element;\r\n\t\t\t\t\t\t\t\telse if (this.component)\r\n\t\t\t\t\t\t\t\t\telement = this.element.find('input');\r\n\t\t\t\t\t\t\t\tif (element)\r\n\t\t\t\t\t\t\t\t\telement.val(\"\").change();\r\n\t\t\t\t\t\t\t\tthis._trigger('changeDate');\r\n\t\t\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\t\t\tif (this.o.autoclose)\r\n\t\t\t\t\t\t\t\t\tthis.hide();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'span':\r\n\t\t\t\t\t\tif (!target.is('.disabled')) {\r\n\t\t\t\t\t\t\tthis.viewDate.setUTCDate(1);\r\n\t\t\t\t\t\t\tif (target.is('.month')) {\r\n\t\t\t\t\t\t\t\tvar day = 1;\r\n\t\t\t\t\t\t\t\tvar month = target.parent().find('span').index(target);\r\n\t\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear();\r\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCMonth(month);\r\n\t\t\t\t\t\t\t\tthis._trigger('changeMonth', this.viewDate);\r\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 1) {\r\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar year = parseInt(target.text(), 10)||0;\r\n\t\t\t\t\t\t\t\tvar day = 1;\r\n\t\t\t\t\t\t\t\tvar month = 0;\r\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCFullYear(year);\r\n\t\t\t\t\t\t\t\tthis._trigger('changeYear', this.viewDate);\r\n\t\t\t\t\t\t\t\tif (this.o.minViewMode === 2) {\r\n\t\t\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.showMode(-1);\r\n\t\t\t\t\t\t\tthis.fill();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'td':\r\n\t\t\t\t\t\tif (target.is('.day') && !target.is('.disabled')){\r\n\t\t\t\t\t\t\tvar day = parseInt(target.text(), 10)||1;\r\n\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear(),\r\n\t\t\t\t\t\t\t\tmonth = this.viewDate.getUTCMonth();\r\n\t\t\t\t\t\t\tif (target.is('.old')) {\r\n\t\t\t\t\t\t\t\tif (month === 0) {\r\n\t\t\t\t\t\t\t\t\tmonth = 11;\r\n\t\t\t\t\t\t\t\t\tyear -= 1;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tmonth -= 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if (target.is('.new')) {\r\n\t\t\t\t\t\t\t\tif (month == 11) {\r\n\t\t\t\t\t\t\t\t\tmonth = 0;\r\n\t\t\t\t\t\t\t\t\tyear += 1;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tmonth += 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setDate: function(date, which){\r\n\t\t\tif (!which || which == 'date')\r\n\t\t\t\tthis.date = new Date(date);\r\n\t\t\tif (!which || which  == 'view')\r\n\t\t\t\tthis.viewDate = new Date(date);\r\n\t\t\tthis.fill();\r\n\t\t\tthis.setValue();\r\n\t\t\tthis._trigger('changeDate');\r\n\t\t\tvar element;\r\n\t\t\tif (this.isInput) {\r\n\t\t\t\telement = this.element;\r\n\t\t\t} else if (this.component){\r\n\t\t\t\telement = this.element.find('input');\r\n\t\t\t}\r\n\t\t\tif (element) {\r\n\t\t\t\telement.change();\r\n\t\t\t\tif (this.o.autoclose && (!which || which == 'date')) {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmoveMonth: function(date, dir){\r\n\t\t\tif (!dir) return date;\r\n\t\t\tvar new_date = new Date(date.valueOf()),\r\n\t\t\t\tday = new_date.getUTCDate(),\r\n\t\t\t\tmonth = new_date.getUTCMonth(),\r\n\t\t\t\tmag = Math.abs(dir),\r\n\t\t\t\tnew_month, test;\r\n\t\t\tdir = dir > 0 ? 1 : -1;\r\n\t\t\tif (mag == 1){\r\n\t\t\t\ttest = dir == -1\r\n\t\t\t\t\t// If going back one month, make sure month is not current month\r\n\t\t\t\t\t// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\r\n\t\t\t\t\t? function(){ return new_date.getUTCMonth() == month; }\r\n\t\t\t\t\t// If going forward one month, make sure month is as expected\r\n\t\t\t\t\t// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\r\n\t\t\t\t\t: function(){ return new_date.getUTCMonth() != new_month; };\r\n\t\t\t\tnew_month = month + dir;\r\n\t\t\t\tnew_date.setUTCMonth(new_month);\r\n\t\t\t\t// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\r\n\t\t\t\tif (new_month < 0 || new_month > 11)\r\n\t\t\t\t\tnew_month = (new_month + 12) % 12;\r\n\t\t\t} else {\r\n\t\t\t\t// For magnitudes >1, move one month at a time...\r\n\t\t\t\tfor (var i=0; i<mag; i++)\r\n\t\t\t\t\t// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\r\n\t\t\t\t\tnew_date = this.moveMonth(new_date, dir);\r\n\t\t\t\t// ...then reset the day, keeping it in the new month\r\n\t\t\t\tnew_month = new_date.getUTCMonth();\r\n\t\t\t\tnew_date.setUTCDate(day);\r\n\t\t\t\ttest = function(){ return new_month != new_date.getUTCMonth(); };\r\n\t\t\t}\r\n\t\t\t// Common date-resetting loop -- if date is beyond end of month, make it\r\n\t\t\t// end of month\r\n\t\t\twhile (test()){\r\n\t\t\t\tnew_date.setUTCDate(--day);\r\n\t\t\t\tnew_date.setUTCMonth(new_month);\r\n\t\t\t}\r\n\t\t\treturn new_date;\r\n\t\t},\r\n\r\n\t\tmoveYear: function(date, dir){\r\n\t\t\treturn this.moveMonth(date, dir*12);\r\n\t\t},\r\n\r\n\t\tdateWithinRange: function(date){\r\n\t\t\treturn date >= this.o.startDate && date <= this.o.endDate;\r\n\t\t},\r\n\r\n\t\tkeydown: function(e){\r\n\t\t\tif (this.picker.is(':not(:visible)')){\r\n\t\t\t\tif (e.keyCode == 27) // allow escape to hide and re-show picker\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar dateChanged = false,\r\n\t\t\t\tdir, day, month,\r\n\t\t\t\tnewDate, newViewDate;\r\n\t\t\tswitch(e.keyCode){\r\n\t\t\t\tcase 27: // escape\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 37: // left\r\n\t\t\t\tcase 39: // right\r\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;\r\n\t\t\t\t\tdir = e.keyCode == 37 ? -1 : 1;\r\n\t\t\t\t\tif (e.ctrlKey){\r\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t} else if (e.shiftKey){\r\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewDate = new Date(this.date);\r\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir);\r\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\r\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\r\n\t\t\t\t\t\tthis.date = newDate;\r\n\t\t\t\t\t\tthis.viewDate = newViewDate;\r\n\t\t\t\t\t\tthis.setValue();\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tdateChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 38: // up\r\n\t\t\t\tcase 40: // down\r\n\t\t\t\t\tif (!this.o.keyboardNavigation) break;\r\n\t\t\t\t\tdir = e.keyCode == 38 ? -1 : 1;\r\n\t\t\t\t\tif (e.ctrlKey){\r\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t} else if (e.shiftKey){\r\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewDate = new Date(this.date);\r\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir * 7);\r\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\r\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\r\n\t\t\t\t\t\tthis.date = newDate;\r\n\t\t\t\t\t\tthis.viewDate = newViewDate;\r\n\t\t\t\t\t\tthis.setValue();\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tdateChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13: // enter\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 9: // tab\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (dateChanged){\r\n\t\t\t\tthis._trigger('changeDate');\r\n\t\t\t\tvar element;\r\n\t\t\t\tif (this.isInput) {\r\n\t\t\t\t\telement = this.element;\r\n\t\t\t\t} else if (this.component){\r\n\t\t\t\t\telement = this.element.find('input');\r\n\t\t\t\t}\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\telement.change();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshowMode: function(dir) {\r\n\t\t\tif (dir) {\r\n\t\t\t\tthis.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t\tvitalets: fixing bug of very special conditions:\r\n\t\t\t\tjquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.\r\n\t\t\t\tMethod show() does not set display css correctly and datepicker is not shown.\r\n\t\t\t\tChanged to .css('display', 'block') solve the problem.\r\n\t\t\t\tSee https://github.com/vitalets/x-editable/issues/37\r\n\r\n\t\t\t\tIn jquery 1.7.2+ everything works fine.\r\n\t\t\t*/\r\n\t\t\t//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\r\n\t\t\tthis.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\r\n\t\t\tthis.updateNavArrows();\r\n\t\t}\r\n\t};\r\n\r\n\tvar DateRangePicker = function(element, options){\r\n\t\tthis.element = $(element);\r\n\t\tthis.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });\r\n\t\tdelete options.inputs;\r\n\r\n\t\t$(this.inputs)\r\n\t\t\t.datepicker(options)\r\n\t\t\t.bind('changeDate', $.proxy(this.dateUpdated, this));\r\n\r\n\t\tthis.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });\r\n\t\tthis.updateDates();\r\n\t};\r\n\tDateRangePicker.prototype = {\r\n\t\tupdateDates: function(){\r\n\t\t\tthis.dates = $.map(this.pickers, function(i){ return i.date; });\r\n\t\t\tthis.updateRanges();\r\n\t\t},\r\n\t\tupdateRanges: function(){\r\n\t\t\tvar range = $.map(this.dates, function(d){ return d.valueOf(); });\r\n\t\t\t$.each(this.pickers, function(i, p){\r\n\t\t\t\tp.setRange(range);\r\n\t\t\t});\r\n\t\t},\r\n\t\tdateUpdated: function(e){\r\n\t\t\tvar dp = $(e.target).data('datepicker'),\r\n\t\t\t\tnew_date = dp.getUTCDate(),\r\n\t\t\t\ti = $.inArray(e.target, this.inputs),\r\n\t\t\t\tl = this.inputs.length;\r\n\t\t\tif (i == -1) return;\r\n\r\n\t\t\tif (new_date < this.dates[i]){\r\n\t\t\t\t// Date being moved earlier/left\r\n\t\t\t\twhile (i>=0 && new_date < this.dates[i]){\r\n\t\t\t\t\tthis.pickers[i--].setUTCDate(new_date);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (new_date > this.dates[i]){\r\n\t\t\t\t// Date being moved later/right\r\n\t\t\t\twhile (i<l && new_date > this.dates[i]){\r\n\t\t\t\t\tthis.pickers[i++].setUTCDate(new_date);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.updateDates();\r\n\t\t},\r\n\t\tremove: function(){\r\n\t\t\t$.map(this.pickers, function(p){ p.remove(); });\r\n\t\t\tdelete this.element.data().datepicker;\r\n\t\t}\r\n\t};\r\n\r\n\tfunction opts_from_el(el, prefix){\r\n\t\t// Derive options from element data-attrs\r\n\t\tvar data = $(el).data(),\r\n\t\t\tout = {}, inkey,\r\n\t\t\treplace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),\r\n\t\t\tprefix = new RegExp('^' + prefix.toLowerCase());\r\n\t\tfor (var key in data)\r\n\t\t\tif (prefix.test(key)){\r\n\t\t\t\tinkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });\r\n\t\t\t\tout[inkey] = data[key];\r\n\t\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction opts_from_locale(lang){\r\n\t\t// Derive options from locale plugins\r\n\t\tvar out = {};\r\n\t\t// Check if \"de-DE\" style date is available, if not language should\r\n\t\t// fallback to 2 letter code eg \"de\"\r\n\t\tif (!dates[lang]) {\r\n\t\t\tlang = lang.split('-')[0]\r\n\t\t\tif (!dates[lang])\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\tvar d = dates[lang];\r\n\t\t$.each(locale_opts, function(i,k){\r\n\t\t\tif (k in d)\r\n\t\t\t\tout[k] = d[k];\r\n\t\t});\r\n\t\treturn out;\r\n\t}\r\n\r\n\tvar old = $.fn.datepicker;\r\n\tvar datepicker = $.fn.datepicker = function ( option ) {\r\n\t\tvar args = Array.apply(null, arguments);\r\n\t\targs.shift();\r\n\t\tvar internal_return,\r\n\t\t\tthis_return;\r\n\t\tthis.each(function () {\r\n\t\t\tvar $this = $(this),\r\n\t\t\t\tdata = $this.data('datepicker'),\r\n\t\t\t\toptions = typeof option == 'object' && option;\r\n\t\t\tif (!data) {\r\n\t\t\t\tvar elopts = opts_from_el(this, 'date'),\r\n\t\t\t\t\t// Preliminary otions\r\n\t\t\t\t\txopts = $.extend({}, defaults, elopts, options),\r\n\t\t\t\t\tlocopts = opts_from_locale(xopts.language),\r\n\t\t\t\t\t// Options priority: js args, data-attrs, locales, defaults\r\n\t\t\t\t\topts = $.extend({}, defaults, locopts, elopts, options);\r\n\t\t\t\tif ($this.is('.input-daterange') || opts.inputs){\r\n\t\t\t\t\tvar ropts = {\r\n\t\t\t\t\t\tinputs: opts.inputs || $this.find('input').toArray()\r\n\t\t\t\t\t};\r\n\t\t\t\t\t$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t$this.data('datepicker', (data = new Datepicker(this, opts)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeof option == 'string' && typeof data[option] == 'function') {\r\n\t\t\t\tinternal_return = data[option].apply(data, args);\r\n\t\t\t\tif (internal_return !== undefined)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (internal_return !== undefined)\r\n\t\t\treturn internal_return;\r\n\t\telse\r\n\t\t\treturn this;\r\n\t};\r\n\r\n\tvar defaults = $.fn.datepicker.defaults = {\r\n\t\tautoclose: false,\r\n\t\tbeforeShowDay: $.noop,\r\n\t\tcalendarWeeks: false,\r\n\t\tclearBtn: false,\r\n\t\tdaysOfWeekDisabled: [],\r\n\t\tendDate: Infinity,\r\n\t\tforceParse: true,\r\n\t\tformat: 'mm/dd/yyyy',\r\n\t\tkeyboardNavigation: true,\r\n\t\tlanguage: 'en',\r\n\t\tminViewMode: 0,\r\n\t\trtl: false,\r\n\t\tstartDate: -Infinity,\r\n\t\tstartView: 0,\r\n\t\ttodayBtn: false,\r\n\t\ttodayHighlight: false,\r\n\t\tweekStart: 0\r\n\t};\r\n\tvar locale_opts = $.fn.datepicker.locale_opts = [\r\n\t\t'format',\r\n\t\t'rtl',\r\n\t\t'weekStart'\r\n\t];\r\n\t$.fn.datepicker.Constructor = Datepicker;\r\n\tvar dates = $.fn.datepicker.dates = {\r\n\t\ten: {\r\n\t\t\tdays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\r\n\t\t\tdaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\r\n\t\t\tdaysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\r\n\t\t\tmonths: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n\t\t\tmonthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\r\n\t\t\ttoday: \"Today\",\r\n\t\t\tclear: \"Clear\"\r\n\t\t}\r\n\t};\r\n\r\n\tvar DPGlobal = {\r\n\t\tmodes: [\r\n\t\t\t{\r\n\t\t\t\tclsName: 'days',\r\n\t\t\t\tnavFnc: 'Month',\r\n\t\t\t\tnavStep: 1\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tclsName: 'months',\r\n\t\t\t\tnavFnc: 'FullYear',\r\n\t\t\t\tnavStep: 1\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tclsName: 'years',\r\n\t\t\t\tnavFnc: 'FullYear',\r\n\t\t\t\tnavStep: 10\r\n\t\t}],\r\n\t\tisLeapYear: function (year) {\r\n\t\t\treturn (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\r\n\t\t},\r\n\t\tgetDaysInMonth: function (year, month) {\r\n\t\t\treturn [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\r\n\t\t},\r\n\t\tvalidParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\r\n\t\tnonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,\r\n\t\tparseFormat: function(format){\r\n\t\t\t// IE treats \\0 as a string end in inputs (truncating the value),\r\n\t\t\t// so it's a bad format delimiter, anyway\r\n\t\t\tvar separators = format.replace(this.validParts, '\\0').split('\\0'),\r\n\t\t\t\tparts = format.match(this.validParts);\r\n\t\t\tif (!separators || !separators.length || !parts || parts.length === 0){\r\n\t\t\t\tthrow new Error(\"Invalid date format.\");\r\n\t\t\t}\r\n\t\t\treturn {separators: separators, parts: parts};\r\n\t\t},\r\n\t\tparseDate: function(date, format, language) {\r\n\t\t\tif (date instanceof Date) return date;\r\n\t\t\tif (typeof format === 'string')\r\n\t\t\t\tformat = DPGlobal.parseFormat(format);\r\n\t\t\tif (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)) {\r\n\t\t\t\tvar part_re = /([\\-+]\\d+)([dmwy])/,\r\n\t\t\t\t\tparts = date.match(/([\\-+]\\d+)([dmwy])/g),\r\n\t\t\t\t\tpart, dir;\r\n\t\t\t\tdate = new Date();\r\n\t\t\t\tfor (var i=0; i<parts.length; i++) {\r\n\t\t\t\t\tpart = part_re.exec(parts[i]);\r\n\t\t\t\t\tdir = parseInt(part[1]);\r\n\t\t\t\t\tswitch(part[2]){\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'm':\r\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir * 7);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'y':\r\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\r\n\t\t\t}\r\n\t\t\tvar parts = date && date.match(this.nonpunctuation) || [],\r\n\t\t\t\tdate = new Date(),\r\n\t\t\t\tparsed = {},\r\n\t\t\t\tsetters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\r\n\t\t\t\tsetters_map = {\r\n\t\t\t\t\tyyyy: function(d,v){ return d.setUTCFullYear(v); },\r\n\t\t\t\t\tyy: function(d,v){ return d.setUTCFullYear(2000+v); },\r\n\t\t\t\t\tm: function(d,v){\r\n\t\t\t\t\t\tv -= 1;\r\n\t\t\t\t\t\twhile (v<0) v += 12;\r\n\t\t\t\t\t\tv %= 12;\r\n\t\t\t\t\t\td.setUTCMonth(v);\r\n\t\t\t\t\t\twhile (d.getUTCMonth() != v)\r\n\t\t\t\t\t\t\td.setUTCDate(d.getUTCDate()-1);\r\n\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t},\r\n\t\t\t\t\td: function(d,v){ return d.setUTCDate(v); }\r\n\t\t\t\t},\r\n\t\t\t\tval, filtered, part;\r\n\t\t\tsetters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\r\n\t\t\tsetters_map['dd'] = setters_map['d'];\r\n\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\r\n\t\t\tvar fparts = format.parts.slice();\r\n\t\t\t// Remove noop parts\r\n\t\t\tif (parts.length != fparts.length) {\r\n\t\t\t\tfparts = $(fparts).filter(function(i,p){\r\n\t\t\t\t\treturn $.inArray(p, setters_order) !== -1;\r\n\t\t\t\t}).toArray();\r\n\t\t\t}\r\n\t\t\t// Process remainder\r\n\t\t\tif (parts.length == fparts.length) {\r\n\t\t\t\tfor (var i=0, cnt = fparts.length; i < cnt; i++) {\r\n\t\t\t\t\tval = parseInt(parts[i], 10);\r\n\t\t\t\t\tpart = fparts[i];\r\n\t\t\t\t\tif (isNaN(val)) {\r\n\t\t\t\t\t\tswitch(part) {\r\n\t\t\t\t\t\t\tcase 'MM':\r\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].months).filter(function(){\r\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\r\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\r\n\t\t\t\t\t\t\t\t\treturn m == p;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].months) + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'M':\r\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].monthsShort).filter(function(){\r\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\r\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\r\n\t\t\t\t\t\t\t\t\treturn m == p;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].monthsShort) + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tparsed[part] = val;\r\n\t\t\t\t}\r\n\t\t\t\tfor (var i=0, s; i<setters_order.length; i++){\r\n\t\t\t\t\ts = setters_order[i];\r\n\t\t\t\t\tif (s in parsed && !isNaN(parsed[s]))\r\n\t\t\t\t\t\tsetters_map[s](date, parsed[s]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn date;\r\n\t\t},\r\n\t\tformatDate: function(date, format, language){\r\n\t\t\tif (typeof format === 'string')\r\n\t\t\t\tformat = DPGlobal.parseFormat(format);\r\n\t\t\tvar val = {\r\n\t\t\t\td: date.getUTCDate(),\r\n\t\t\t\tD: dates[language].daysShort[date.getUTCDay()],\r\n\t\t\t\tDD: dates[language].days[date.getUTCDay()],\r\n\t\t\t\tm: date.getUTCMonth() + 1,\r\n\t\t\t\tM: dates[language].monthsShort[date.getUTCMonth()],\r\n\t\t\t\tMM: dates[language].months[date.getUTCMonth()],\r\n\t\t\t\tyy: date.getUTCFullYear().toString().substring(2),\r\n\t\t\t\tyyyy: date.getUTCFullYear()\r\n\t\t\t};\r\n\t\t\tval.dd = (val.d < 10 ? '0' : '') + val.d;\r\n\t\t\tval.mm = (val.m < 10 ? '0' : '') + val.m;\r\n\t\t\tvar date = [],\r\n\t\t\t\tseps = $.extend([], format.separators);\r\n\t\t\tfor (var i=0, cnt = format.parts.length; i <= cnt; i++) {\r\n\t\t\t\tif (seps.length)\r\n\t\t\t\t\tdate.push(seps.shift());\r\n\t\t\t\tdate.push(val[format.parts[i]]);\r\n\t\t\t}\r\n\t\t\treturn date.join('');\r\n\t\t},\r\n\t\theadTemplate: '<thead>'+\r\n\t\t\t\t\t\t\t'<tr>'+\r\n\t\t\t\t\t\t\t\t'<th class=\"prev\"><i class=\"icon-arrow-left\"/></th>'+\r\n\t\t\t\t\t\t\t\t'<th colspan=\"5\" class=\"datepicker-switch\"></th>'+\r\n\t\t\t\t\t\t\t\t'<th class=\"next\"><i class=\"icon-arrow-right\"/></th>'+\r\n\t\t\t\t\t\t\t'</tr>'+\r\n\t\t\t\t\t\t'</thead>',\r\n\t\tcontTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\r\n\t\tfootTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr><tr><th colspan=\"7\" class=\"clear\"></th></tr></tfoot>'\r\n\t};\r\n\tDPGlobal.template = '<div class=\"datepicker\">'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-days\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\" table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\t'<tbody></tbody>'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-months\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-years\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t'</div>';\r\n\r\n\t$.fn.datepicker.DPGlobal = DPGlobal;\r\n\r\n\r\n\t/* DATEPICKER NO CONFLICT\r\n\t* =================== */\r\n\r\n\t$.fn.datepicker.noConflict = function(){\r\n\t\t$.fn.datepicker = old;\r\n\t\treturn this;\r\n\t};\r\n\r\n\r\n\t/* DATEPICKER DATA-API\r\n\t* ================== */\r\n\r\n\t$(document).on(\r\n\t\t'focus.datepicker.data-api click.datepicker.data-api',\r\n\t\t'[data-provide=\"datepicker\"]',\r\n\t\tfunction(e){\r\n\t\t\tvar $this = $(this);\r\n\t\t\tif ($this.data('datepicker')) return;\r\n\t\t\te.preventDefault();\r\n\t\t\t// component click requires us to explicitly show it\r\n\t\t\tdatepicker.call($this, 'show');\r\n\t\t}\r\n\t);\r\n\t$(function(){\r\n\t\t//$('[data-provide=\"datepicker-inline\"]').datepicker();\r\n        //vit: changed to support noConflict()\r\n        datepicker.call($('[data-provide=\"datepicker-inline\"]'));\r\n\t});\r\n\r\n}( window.jQuery ));\r\n\r\n/**\r\nBootstrap-datepicker.  \r\nDescription and examples: https://github.com/eternicode/bootstrap-datepicker.  \r\nFor **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales\r\nand set `language` option.  \r\nSince 1.4.0 date has different appearance in **popup** and **inline** modes. \r\n\r\n@class date\r\n@extends abstractinput\r\n@final\r\n@example\r\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-title=\"Select date\">15/05/1984</a>\r\n<script>\r\n$(function(){\r\n    $('#dob').editable({\r\n        format: 'yyyy-mm-dd',    \r\n        viewformat: 'dd/mm/yyyy',    \r\n        datepicker: {\r\n                weekStart: 1\r\n           }\r\n        }\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one\r\n    $.fn.bdatepicker = $.fn.datepicker.noConflict();\r\n    if(!$.fn.datepicker) { //if there were no other datepickers, keep also original name\r\n        $.fn.datepicker = $.fn.bdatepicker;    \r\n    }    \r\n    \r\n    var Date = function (options) {\r\n        this.init('date', options, Date.defaults);\r\n        this.initPicker(options, Date.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);    \r\n    \r\n    $.extend(Date.prototype, {\r\n        initPicker: function(options, defaults) {\r\n            //'format' is set directly from settings or data-* attributes\r\n\r\n            //by default viewformat equals to format\r\n            if(!this.options.viewformat) {\r\n                this.options.viewformat = this.options.format;\r\n            }\r\n            \r\n            //try parse datepicker config defined as json string in data-datepicker\r\n            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);\r\n            \r\n            //overriding datepicker config (as by default jQuery extend() is not recursive)\r\n            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only\r\n            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {\r\n                format: this.options.viewformat\r\n            });\r\n            \r\n            //language\r\n            this.options.datepicker.language = this.options.datepicker.language || 'en'; \r\n\r\n            //store DPglobal\r\n            this.dpg = $.fn.bdatepicker.DPGlobal; \r\n\r\n            //store parsed formats\r\n            this.parsedFormat = this.dpg.parseFormat(this.options.format);\r\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);            \r\n        },\r\n        \r\n        render: function () {\r\n            this.$input.bdatepicker(this.options.datepicker);\r\n            \r\n            //\"clear\" link\r\n            if(this.options.clear) {\r\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this.clear();\r\n                }, this));\r\n                \r\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \r\n            }                \r\n        },\r\n        \r\n        value2html: function(value, element) {\r\n           var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';\r\n           Date.superclass.value2html.call(this, text, element); \r\n        },\r\n\r\n        html2value: function(html) {\r\n            return this.parseDate(html, this.parsedViewFormat);\r\n        },   \r\n\r\n        value2str: function(value) {\r\n            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';\r\n        }, \r\n\r\n        str2value: function(str) {\r\n            return this.parseDate(str, this.parsedFormat);\r\n        }, \r\n\r\n        value2submit: function(value) {\r\n            return this.value2str(value);\r\n        },                    \r\n\r\n        value2input: function(value) {\r\n            this.$input.bdatepicker('update', value);\r\n        },\r\n\r\n        input2value: function() { \r\n            return this.$input.data('datepicker').date;\r\n        },       \r\n\r\n        activate: function() {\r\n        },\r\n\r\n        clear:  function() {\r\n            this.$input.data('datepicker').date = null;\r\n            this.$input.find('.active').removeClass('active');\r\n            if(!this.options.showbuttons) {\r\n                this.$input.closest('form').submit(); \r\n            }\r\n        },\r\n\r\n        autosubmit: function() {\r\n            this.$input.on('mouseup', '.day', function(e){\r\n                if($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {\r\n                    return;\r\n                }\r\n                var $form = $(this).closest('form');\r\n                setTimeout(function() {\r\n                    $form.submit();\r\n                }, 200);\r\n            });\r\n           //changedate is not suitable as it triggered when showing datepicker. see #149\r\n           /*\r\n           this.$input.on('changeDate', function(e){\r\n               var $form = $(this).closest('form');\r\n               setTimeout(function() {\r\n                   $form.submit();\r\n               }, 200);\r\n           });\r\n           */\r\n       },\r\n       \r\n       /*\r\n        For incorrect date bootstrap-datepicker returns current date that is not suitable\r\n        for datefield.\r\n        This function returns null for incorrect date.  \r\n       */\r\n       parseDate: function(str, format) {\r\n           var date = null, formattedBack;\r\n           if(str) {\r\n               date = this.dpg.parseDate(str, format, this.options.datepicker.language);\r\n               if(typeof str === 'string') {\r\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);\r\n                   if(str !== formattedBack) {\r\n                       date = null;\r\n                   }\r\n               }\r\n           }\r\n           return date;\r\n       }\r\n\r\n    });\r\n\r\n    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <div></div>\r\n        **/         \r\n        tpl:'<div class=\"editable-date well\"></div>',\r\n        /**\r\n        @property inputclass \r\n        @default null\r\n        **/\r\n        inputclass: null,\r\n        /**\r\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\r\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>  \r\n\r\n        @property format \r\n        @type string\r\n        @default yyyy-mm-dd\r\n        **/\r\n        format:'yyyy-mm-dd',\r\n        /**\r\n        Format used for displaying date. Also applied when converting date from element's text on init.   \r\n        If not specified equals to <code>format</code>\r\n\r\n        @property viewformat \r\n        @type string\r\n        @default null\r\n        **/\r\n        viewformat: null,\r\n        /**\r\n        Configuration of datepicker.\r\n        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html\r\n\r\n        @property datepicker \r\n        @type object\r\n        @default {\r\n            weekStart: 0,\r\n            startView: 0,\r\n            minViewMode: 0,\r\n            autoclose: false\r\n        }\r\n        **/\r\n        datepicker:{\r\n            weekStart: 0,\r\n            startView: 0,\r\n            minViewMode: 0,\r\n            autoclose: false\r\n        },\r\n        /**\r\n        Text shown as clear date button. \r\n        If <code>false</code> clear button will not be rendered.\r\n\r\n        @property clear \r\n        @type boolean|string\r\n        @default 'x clear'\r\n        **/\r\n        clear: '&times; clear'\r\n    });\r\n\r\n    $.fn.editabletypes.date = Date;\r\n\r\n}(window.jQuery));\r\n\r\n/**\r\nBootstrap datefield input - modification for inline mode.\r\nShows normal <input type=\"text\"> and binds popup datepicker.  \r\nAutomatically shown in inline mode.\r\n\r\n@class datefield\r\n@extends date\r\n\r\n@since 1.4.0\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var DateField = function (options) {\r\n        this.init('datefield', options, DateField.defaults);\r\n        this.initPicker(options, DateField.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);    \r\n    \r\n    $.extend(DateField.prototype, {\r\n        render: function () {\r\n            this.$input = this.$tpl.find('input');\r\n            this.setClass();\r\n            this.setAttr('placeholder');\r\n    \r\n            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)        \r\n            this.$tpl.bdatepicker(this.options.datepicker);\r\n            \r\n            //need to disable original event handlers\r\n            this.$input.off('focus keydown');\r\n            \r\n            //update value of datepicker\r\n            this.$input.keyup($.proxy(function(){\r\n               this.$tpl.removeData('date');\r\n               this.$tpl.bdatepicker('update');\r\n            }, this));\r\n            \r\n        },   \r\n        \r\n       value2input: function(value) {\r\n           this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');\r\n           this.$tpl.bdatepicker('update');\r\n       },\r\n        \r\n       input2value: function() { \r\n           return this.html2value(this.$input.val());\r\n       },              \r\n        \r\n       activate: function() {\r\n           $.fn.editabletypes.text.prototype.activate.call(this);\r\n       },\r\n       \r\n       autosubmit: function() {\r\n         //reset autosubmit to empty  \r\n       }\r\n    });\r\n    \r\n    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {\r\n        /**\r\n        @property tpl \r\n        **/         \r\n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\r\n        /**\r\n        @property inputclass \r\n        @default 'input-small'\r\n        **/         \r\n        inputclass: 'input-small',\r\n        \r\n        /* datepicker config */\r\n        datepicker: {\r\n            weekStart: 0,\r\n            startView: 0,\r\n            minViewMode: 0,\r\n            autoclose: true\r\n        }\r\n    });\r\n    \r\n    $.fn.editabletypes.datefield = DateField;\r\n\r\n}(window.jQuery));\r\n/**\r\nBootstrap-datetimepicker.  \r\nBased on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker). \r\nBefore usage you should manually include dependent js and css:\r\n\r\n    <link href=\"css/datetimepicker.css\" rel=\"stylesheet\" type=\"text/css\"></link> \r\n    <script src=\"js/bootstrap-datetimepicker.js\"></script>\r\n\r\nFor **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales\r\nand set `language` option.  \r\n\r\n@class datetime\r\n@extends abstractinput\r\n@final\r\n@since 1.4.4\r\n@example\r\n<a href=\"#\" id=\"last_seen\" data-type=\"datetime\" data-pk=\"1\" data-url=\"/post\" title=\"Select date & time\">15/03/2013 12:45</a>\r\n<script>\r\n$(function(){\r\n    $('#last_seen').editable({\r\n        format: 'yyyy-mm-dd hh:ii',    \r\n        viewformat: 'dd/mm/yyyy hh:ii',    \r\n        datetimepicker: {\r\n                weekStart: 1\r\n           }\r\n        }\r\n    });\r\n});\r\n</script>\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    var DateTime = function (options) {\r\n        this.init('datetime', options, DateTime.defaults);\r\n        this.initPicker(options, DateTime.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);\r\n\r\n    $.extend(DateTime.prototype, {\r\n        initPicker: function(options, defaults) {\r\n            //'format' is set directly from settings or data-* attributes\r\n\r\n            //by default viewformat equals to format\r\n            if(!this.options.viewformat) {\r\n                this.options.viewformat = this.options.format;\r\n            }\r\n            \r\n            //try parse datetimepicker config defined as json string in data-datetimepicker\r\n            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);\r\n\r\n            //overriding datetimepicker config (as by default jQuery extend() is not recursive)\r\n            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only\r\n            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {\r\n                format: this.options.viewformat\r\n            });\r\n\r\n            //language\r\n            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en'; \r\n\r\n            //store DPglobal\r\n            this.dpg = $.fn.datetimepicker.DPGlobal; \r\n\r\n            //store parsed formats\r\n            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);\r\n            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);\r\n        },\r\n\r\n        render: function () {\r\n            this.$input.datetimepicker(this.options.datetimepicker);\r\n\r\n            //adjust container position when viewMode changes\r\n            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80\r\n            this.$input.on('changeMode', function(e) {\r\n                var f = $(this).closest('form').parent();\r\n                //timeout here, otherwise container changes position before form has new size\r\n                setTimeout(function(){\r\n                    f.triggerHandler('resize');\r\n                }, 0);\r\n            });\r\n\r\n            //\"clear\" link\r\n            if(this.options.clear) {\r\n                this.$clear = $('<a href=\"#\"></a>').html(this.options.clear).click($.proxy(function(e){\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this.clear();\r\n                }, this));\r\n\r\n                this.$tpl.parent().append($('<div class=\"editable-clear\">').append(this.$clear));  \r\n            }\r\n        },\r\n\r\n        value2html: function(value, element) {\r\n            //formatDate works with UTCDate!\r\n            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';\r\n            if(element) {\r\n                DateTime.superclass.value2html.call(this, text, element);\r\n            } else {\r\n                return text;\r\n            }\r\n        },\r\n\r\n        html2value: function(html) {\r\n            //parseDate return utc date!\r\n            var value = this.parseDate(html, this.parsedViewFormat); \r\n            return value ? this.fromUTC(value) : null;\r\n        },\r\n\r\n        value2str: function(value) {\r\n            //formatDate works with UTCDate!\r\n            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';\r\n       },\r\n\r\n       str2value: function(str) {\r\n           //parseDate return utc date!\r\n           var value = this.parseDate(str, this.parsedFormat);\r\n           return value ? this.fromUTC(value) : null;\r\n       },\r\n\r\n       value2submit: function(value) {\r\n           return this.value2str(value);\r\n       },\r\n\r\n       value2input: function(value) {\r\n           if(value) {\r\n             this.$input.data('datetimepicker').setDate(value);\r\n           }\r\n       },\r\n\r\n       input2value: function() { \r\n           //date may be cleared, in that case getDate() triggers error\r\n           var dt = this.$input.data('datetimepicker');\r\n           return dt.date ? dt.getDate() : null;\r\n       },\r\n\r\n       activate: function() {\r\n       },\r\n\r\n       clear: function() {\r\n          this.$input.data('datetimepicker').date = null;\r\n          this.$input.find('.active').removeClass('active');\r\n          if(!this.options.showbuttons) {\r\n             this.$input.closest('form').submit(); \r\n          }          \r\n       },\r\n\r\n       autosubmit: function() {\r\n           this.$input.on('mouseup', '.minute', function(e){\r\n               var $form = $(this).closest('form');\r\n               setTimeout(function() {\r\n                   $form.submit();\r\n               }, 200);\r\n           });\r\n       },\r\n\r\n       //convert date from local to utc\r\n       toUTC: function(value) {\r\n         return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;  \r\n       },\r\n\r\n       //convert date from utc to local\r\n       fromUTC: function(value) {\r\n         return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;  \r\n       },\r\n\r\n       /*\r\n        For incorrect date bootstrap-datetimepicker returns current date that is not suitable\r\n        for datetimefield.\r\n        This function returns null for incorrect date.  \r\n       */\r\n       parseDate: function(str, format) {\r\n           var date = null, formattedBack;\r\n           if(str) {\r\n               date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);\r\n               if(typeof str === 'string') {\r\n                   formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);\r\n                   if(str !== formattedBack) {\r\n                       date = null;\r\n                   } \r\n               }\r\n           }\r\n           return date;\r\n       }\r\n\r\n    });\r\n\r\n    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {\r\n        /**\r\n        @property tpl \r\n        @default <div></div>\r\n        **/         \r\n        tpl:'<div class=\"editable-date well\"></div>',\r\n        /**\r\n        @property inputclass \r\n        @default null\r\n        **/\r\n        inputclass: null,\r\n        /**\r\n        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\r\n        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>  \r\n        \r\n        @property format \r\n        @type string\r\n        @default yyyy-mm-dd hh:ii\r\n        **/         \r\n        format:'yyyy-mm-dd hh:ii',\r\n        formatType:'standard',\r\n        /**\r\n        Format used for displaying date. Also applied when converting date from element's text on init.   \r\n        If not specified equals to <code>format</code>\r\n        \r\n        @property viewformat \r\n        @type string\r\n        @default null\r\n        **/\r\n        viewformat: null,\r\n        /**\r\n        Configuration of datetimepicker.\r\n        Full list of options: https://github.com/smalot/bootstrap-datetimepicker\r\n\r\n        @property datetimepicker \r\n        @type object\r\n        @default { }\r\n        **/\r\n        datetimepicker:{\r\n            todayHighlight: false,\r\n            autoclose: false\r\n        },\r\n        /**\r\n        Text shown as clear date button. \r\n        If <code>false</code> clear button will not be rendered.\r\n\r\n        @property clear \r\n        @type boolean|string\r\n        @default 'x clear'\r\n        **/\r\n        clear: '&times; clear'\r\n    });\r\n\r\n    $.fn.editabletypes.datetime = DateTime;\r\n\r\n}(window.jQuery));\r\n/**\r\nBootstrap datetimefield input - datetime input for inline mode.\r\nShows normal <input type=\"text\"> and binds popup datetimepicker.  \r\nAutomatically shown in inline mode.\r\n\r\n@class datetimefield\r\n@extends datetime\r\n\r\n**/\r\n(function ($) {\r\n    \"use strict\";\r\n    \r\n    var DateTimeField = function (options) {\r\n        this.init('datetimefield', options, DateTimeField.defaults);\r\n        this.initPicker(options, DateTimeField.defaults);\r\n    };\r\n\r\n    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);\r\n    \r\n    $.extend(DateTimeField.prototype, {\r\n        render: function () {\r\n            this.$input = this.$tpl.find('input');\r\n            this.setClass();\r\n            this.setAttr('placeholder');\r\n            \r\n            this.$tpl.datetimepicker(this.options.datetimepicker);\r\n            \r\n            //need to disable original event handlers\r\n            this.$input.off('focus keydown');\r\n            \r\n            //update value of datepicker\r\n            this.$input.keyup($.proxy(function(){\r\n               this.$tpl.removeData('date');\r\n               this.$tpl.datetimepicker('update');\r\n            }, this));\r\n            \r\n        },   \r\n      \r\n       value2input: function(value) {\r\n           this.$input.val(this.value2html(value));\r\n           this.$tpl.datetimepicker('update');\r\n       },\r\n        \r\n       input2value: function() { \r\n           return this.html2value(this.$input.val());\r\n       },              \r\n        \r\n       activate: function() {\r\n           $.fn.editabletypes.text.prototype.activate.call(this);\r\n       },\r\n       \r\n       autosubmit: function() {\r\n         //reset autosubmit to empty  \r\n       }\r\n    });\r\n    \r\n    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {\r\n        /**\r\n        @property tpl \r\n        **/         \r\n        tpl:'<div class=\"input-append date\"><input type=\"text\"/><span class=\"add-on\"><i class=\"icon-th\"></i></span></div>',\r\n        /**\r\n        @property inputclass \r\n        @default 'input-medium'\r\n        **/         \r\n        inputclass: 'input-medium',\r\n        \r\n        /* datetimepicker config */\r\n        datetimepicker:{\r\n            todayHighlight: false,\r\n            autoclose: true\r\n        }\r\n    });\r\n    \r\n    $.fn.editabletypes.datetimefield = DateTimeField;\r\n\r\n}(window.jQuery));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Modules/Translation/node_modules/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js\n");

/***/ }),

/***/ 17:
/*!*********************************************************************!*\
  !*** multi ./Modules/Translation/Resources/assets/admin/js/main.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\xampp\htdocs\ecom\Modules\Translation\Resources\assets\admin\js\main.js */"./Modules/Translation/Resources/assets/admin/js/main.js");


/***/ })

/******/ });